{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "password-input",
  "type": "registry:component",
  "title": "Password Input",
  "description": "A component for inputting passwords",
  "dependencies": [
    "lucide-react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-label"
  ],
  "files": [
    {
      "path": "registry/default/components/input/password-input.tsx",
      "content": "'use client'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport { Input } from '@/components/ui/input'\r\nimport { Label } from '@/components/ui/label'\r\nimport { EyeIcon, EyeOffIcon } from 'lucide-react'\r\nimport React, { useId } from 'react'\r\n\r\nexport default function PasswordInput() {\r\n    const id = useId()\r\n    const [show, setShow] = React.useState<boolean>(false)\r\n\r\n    return (\r\n        <div className=\"flex w-full max-w-4/5 flex-col gap-2\">\r\n            <Label htmlFor={id}>Password input</Label>\r\n\r\n            <div className=\"relative w-full\">\r\n                <Input\r\n                    id={id}\r\n                    placeholder=\"Password\"\r\n                    type={show ? 'text' : 'password'}\r\n                    className=\"pe-9\"\r\n                />\r\n\r\n                <Button\r\n                    size=\"icon\"\r\n                    variant=\"ghost\"\r\n                    className=\"absolute top-1/2 right-0.5 h-8 w-8 -translate-y-1/2 cursor-pointer\"\r\n                    onClick={() => setShow(!show)}\r\n                >\r\n                    {show ? <EyeOffIcon /> : <EyeIcon />}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/password-input.tsx"
    },
    {
      "path": "registry\\default\\components\\input\\password-input.tsx",
      "content": "'use client'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport { Input } from '@/components/ui/input'\r\nimport { Label } from '@/components/ui/label'\r\nimport { EyeIcon, EyeOffIcon } from 'lucide-react'\r\nimport React, { useId } from 'react'\r\n\r\nexport default function PasswordInput() {\r\n    const id = useId()\r\n    const [show, setShow] = React.useState<boolean>(false)\r\n\r\n    return (\r\n        <div className=\"flex w-full max-w-4/5 flex-col gap-2\">\r\n            <Label htmlFor={id}>Password input</Label>\r\n\r\n            <div className=\"relative w-full\">\r\n                <Input\r\n                    id={id}\r\n                    placeholder=\"Password\"\r\n                    type={show ? 'text' : 'password'}\r\n                    className=\"pe-9\"\r\n                />\r\n\r\n                <Button\r\n                    size=\"icon\"\r\n                    variant=\"ghost\"\r\n                    className=\"absolute top-1/2 right-0.5 h-8 w-8 -translate-y-1/2 cursor-pointer\"\r\n                    onClick={() => setShow(!show)}\r\n                >\r\n                    {show ? <EyeOffIcon /> : <EyeIcon />}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\button.tsx",
      "content": "import * as React from 'react'\r\nimport { Slot } from '@radix-ui/react-slot'\r\nimport { cva, type VariantProps } from 'class-variance-authority'\r\n\r\nimport { cn } from '@/lib/utils'\r\n\r\nconst buttonVariants = cva(\r\n    \"inline-flex items-center relative justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive group\",\r\n    {\r\n        variants: {\r\n            variant: {\r\n                default:\r\n                    'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\r\n                destructive:\r\n                    'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\r\n                outline:\r\n                    'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\r\n                secondary:\r\n                    'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\r\n                ghost: 'hover:bg-accent hover:text-accent-foreground',\r\n                link: 'text-primary underline-offset-4 hover:underline',\r\n                defaultWithOutline:\r\n                    'bg-transparent text-primary-foreground border border-border hover:border-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50 dark:text-primary-foreground before:-z-10 before:content-[\"\"] before:absolute before:top-1/2 before:left-1/2 dark:hover:border-foreground before:-translate-x-1/2 before:-translate-y-1/2 before:w-[calc(100%-6px)] before:h-[calc(100%-6px)] before:rounded-sm before:bg-primary  before:transition-colors duration-500',\r\n                secondaryWithOutline:\r\n                    'bg-transparent text-secondary-foreground border border-border hover:border-foreground dark:bg-input/30 dark:border-input dark:hover:border-primary dark:hover:bg-input/50 dark:text-secondary-foreground before:-z-10 before:content-[\"\"] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-[calc(100%-6px)] before:h-[calc(100%-6px)] before:rounded-sm before:bg-secondary before:transition-colors duration-500',\r\n            },\r\n            size: {\r\n                default: 'h-9 px-4 py-2 has-[>svg]:px-3',\r\n                sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\r\n                lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\r\n                xl: 'h-12 rounded-md px-8 has-[>svg]:px-6',\r\n                icon: 'size-9',\r\n                iconSm: 'size-8',\r\n                iconXsm: 'size-5',\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            variant: 'default',\r\n            size: 'default',\r\n        },\r\n    }\r\n)\r\n\r\nfunction Button({\r\n    className,\r\n    variant,\r\n    size,\r\n    asChild = false,\r\n    ...props\r\n}: React.ComponentProps<'button'> &\r\n    VariantProps<typeof buttonVariants> & {\r\n        asChild?: boolean\r\n    }) {\r\n    const Comp = asChild ? Slot : 'button'\r\n\r\n    return (\r\n        <Comp\r\n            data-slot=\"button\"\r\n            className={cn(buttonVariants({ variant, size, className }))}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nexport { Button, buttonVariants }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\input.tsx",
      "content": "import * as React from 'react'\r\n\r\nimport { cn } from '@/lib/utils'\r\n\r\nfunction Input({ className, type, ...props }: React.ComponentProps<'input'>) {\r\n    return (\r\n        <input\r\n            type={type}\r\n            data-slot=\"input\"\r\n            className={cn(\r\n                'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\r\n                'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\r\n                'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nexport { Input }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\label.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nfunction Label({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\r\n  return (\r\n    <LabelPrimitive.Root\r\n      data-slot=\"label\"\r\n      className={cn(\r\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Label }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx'\r\nimport { twMerge } from 'tailwind-merge'\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n    return twMerge(clsx(inputs))\r\n}\r\n\r\nexport const convertRegistryPaths = (content: string): string => {\r\n    return content\r\n        .replace(/@\\/registry\\/default\\/ui/g, '@/components/ui')\r\n        .replace(/@\\/registry\\/default\\/hooks/g, '@/hooks')\r\n        .replace(/@\\/registry\\/default\\/lib/g, '@/lib')\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}