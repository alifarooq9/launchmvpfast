{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tag-dropdown",
  "type": "registry:component",
  "title": "Tag Dropdown",
  "description": "A dropdown menu for tags",
  "files": [
    {
      "path": "registry/default/components/dropdown-menu/tag-dropdown.tsx",
      "content": "'use client'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport {\r\n    DropdownMenu,\r\n    DropdownMenuContent,\r\n    DropdownMenuItem,\r\n    DropdownMenuLabel,\r\n    DropdownMenuSeparator,\r\n    DropdownMenuTrigger,\r\n} from '@/components/ui/dropdown-menu'\r\nimport { Input } from '@/components/ui/input'\r\nimport { cn } from '@/lib/utils'\r\nimport { ChevronDownIcon, PlusIcon, XIcon } from 'lucide-react'\r\nimport {\r\n    Form,\r\n    FormControl,\r\n    FormField,\r\n    FormItem,\r\n    FormMessage,\r\n} from '@/components/ui/form'\r\nimport React from 'react'\r\nimport { z } from 'zod'\r\nimport { useForm } from 'react-hook-form'\r\nimport { zodResolver } from '@hookform/resolvers/zod'\r\n\r\nconst defaultTags = [\r\n    {\r\n        id: 'frontend',\r\n        label: 'Frontend',\r\n    },\r\n    {\r\n        id: 'backend',\r\n        label: 'Backend',\r\n    },\r\n    {\r\n        id: 'design',\r\n        label: 'Design',\r\n    },\r\n    {\r\n        id: 'devops',\r\n        label: 'DevOps',\r\n    },\r\n    {\r\n        id: 'qa',\r\n        label: 'QA',\r\n    },\r\n    {\r\n        id: 'operations',\r\n        label: 'Operations',\r\n    },\r\n]\r\n\r\ntype TagDropdownProps = {\r\n    side: 'left' | 'right' | 'top' | 'bottom'\r\n    align: 'start' | 'center' | 'end'\r\n}\r\n\r\nconst formSchema = z.object({\r\n    tag: z.string().min(1, {\r\n        message: 'Tag is required',\r\n    }),\r\n})\r\n\r\nexport default function TagDropdown({\r\n    side = 'bottom',\r\n    align = 'center',\r\n}: TagDropdownProps) {\r\n    const [tags, setTags] = React.useState([...defaultTags])\r\n    const [selectedTag, setSelectedTag] = React.useState<string>('')\r\n    const [isInputFocused, setIsInputFocused] = React.useState(false)\r\n\r\n    const handleOnSelect = (tag: { id: string; label: string }) => {\r\n        if (selectedTag === tag.id) {\r\n            return setSelectedTag('')\r\n        }\r\n\r\n        setSelectedTag(tag.id)\r\n    }\r\n\r\n    // Handle keyboard events when input is focused\r\n    const handleInputKeyDown = (e: React.KeyboardEvent) => {\r\n        if (isInputFocused) {\r\n            // Stop event propagation to prevent dropdown keyboard navigation\r\n            e.stopPropagation()\r\n        }\r\n    }\r\n\r\n    const form = useForm<z.infer<typeof formSchema>>({\r\n        resolver: zodResolver(formSchema),\r\n        defaultValues: {\r\n            tag: '',\r\n        },\r\n    })\r\n\r\n    const onSubmit = (data: z.infer<typeof formSchema>) => {\r\n        if (!data.tag) return\r\n        if (tags.find((tag) => tag.id === data.tag.toLowerCase())) {\r\n            return form.setValue('tag', '')\r\n        }\r\n\r\n        setTags([\r\n            ...tags,\r\n            {\r\n                id: data.tag.toLowerCase(),\r\n                label: data.tag,\r\n            },\r\n        ])\r\n        form.reset()\r\n    }\r\n\r\n    return (\r\n        <DropdownMenu>\r\n            <DropdownMenuTrigger asChild>\r\n                <Button variant=\"outline\">\r\n                    {selectedTag ? (\r\n                        <span>\r\n                            {tags.find((tag) => tag.id === selectedTag)?.label}\r\n                        </span>\r\n                    ) : (\r\n                        <span>Assign Tag</span>\r\n                    )}\r\n                    <ChevronDownIcon />\r\n                </Button>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent\r\n                align={align}\r\n                side={side}\r\n                className=\"w-[200px]\"\r\n                onKeyDown={(e) => {\r\n                    // Prevent dropdown keyboard navigation when input is focused\r\n                    if (isInputFocused) {\r\n                        e.stopPropagation()\r\n                    }\r\n                }}\r\n            >\r\n                <DropdownMenuLabel>Assign team</DropdownMenuLabel>\r\n                <DropdownMenuSeparator />\r\n                <div className=\"flex max-h-[200px] flex-wrap gap-1 overflow-y-auto\">\r\n                    {tags.map((tag) => (\r\n                        <DropdownMenuItem\r\n                            key={tag.id}\r\n                            onSelect={() => handleOnSelect(tag)}\r\n                            className={cn(\r\n                                'bg-accent focus:bg-accent/50 cursor-pointer py-1'\r\n                            )}\r\n                        >\r\n                            {tag.label}\r\n\r\n                            {selectedTag == tag.id && <XIcon />}\r\n                        </DropdownMenuItem>\r\n                    ))}\r\n                </div>\r\n                <DropdownMenuSeparator />\r\n\r\n                <Form {...form}>\r\n                    <form\r\n                        onSubmit={form.handleSubmit(onSubmit)}\r\n                        className=\"flex justify-end gap-1 p-1\"\r\n                    >\r\n                        <FormField\r\n                            control={form.control}\r\n                            name=\"tag\"\r\n                            render={({ field }) => (\r\n                                <FormItem>\r\n                                    <FormControl>\r\n                                        <Input\r\n                                            placeholder=\"New Team\"\r\n                                            autoFocus\r\n                                            className=\"h-8\"\r\n                                            onFocus={() =>\r\n                                                setIsInputFocused(true)\r\n                                            }\r\n                                            onKeyDown={handleInputKeyDown}\r\n                                            {...field}\r\n                                            onBlur={() => {\r\n                                                setIsInputFocused(false)\r\n                                                field.onBlur()\r\n                                            }}\r\n                                        />\r\n                                    </FormControl>\r\n                                    <FormMessage />\r\n                                </FormItem>\r\n                            )}\r\n                        />\r\n                        <Button\r\n                            variant=\"outline\"\r\n                            size=\"icon\"\r\n                            className=\"h-8 w-8\"\r\n                        >\r\n                            <PlusIcon />\r\n                        </Button>\r\n                    </form>\r\n                </Form>\r\n            </DropdownMenuContent>\r\n        </DropdownMenu>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/tag-dropdown.tsx"
    }
  ]
}