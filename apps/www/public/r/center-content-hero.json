{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "center-content-hero",
  "type": "registry:block",
  "title": "Center Content",
  "description": "A centered hero section with content",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-popover",
    "motion"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "registry/default/blocks/hero-sections/center-content-hero/hero.tsx",
      "content": "'use client'\r\n\r\nimport Link from 'next/link'\r\nimport Header from '@/registry/default/blocks/hero-sections/center-content-hero/header'\r\nimport { cn } from '@/lib/utils'\r\nimport { buttonVariants } from '@/components/ui/button'\r\nimport { InteractiveGridPattern } from '@/components/ui/interactive-grid-pattern'\r\nimport { motion as m, Variants } from 'motion/react'\r\n\r\nconst staggerDelay = 0.4\r\nconst initialDelay = 0.2 // initial delay before the first element animates\r\nconst totalDelay = initialDelay + staggerDelay * 6 // number of elements animating\r\n\r\nexport default function Hero() {\r\n    const variants = {\r\n        hidden: () => ({\r\n            opacity: 0,\r\n            filter: 'blur(10px)',\r\n            transform: 'translateY(10px) scale(0.95)',\r\n        }),\r\n        visible: (custom: number) => ({\r\n            opacity: 1,\r\n            transform: 'translateY(0) scale(1)',\r\n            filter: 'blur(0)',\r\n            transition: {\r\n                delay: custom * staggerDelay + initialDelay,\r\n                duration: 0.5,\r\n                ease: 'easeInOut',\r\n            },\r\n        }),\r\n    }\r\n\r\n    return (\r\n        <div className=\"relative flex min-h-svh w-full flex-col items-center justify-between\">\r\n            <InteractiveGridPattern\r\n                width={100}\r\n                height={100}\r\n                squares={[80, 80]}\r\n                squaresClassName=\"hover:fill-muted\"\r\n                className=\"opacity-40 dark:opacity-30\"\r\n            />\r\n            {/* Header */}\r\n            <Header />\r\n\r\n            {/* Hero Section */}\r\n            <section className=\"container flex w-full flex-1 items-center justify-center overflow-hidden\">\r\n                <div className=\"relative flex flex-col items-center justify-center gap-6\">\r\n                    <h1 className=\"text-center text-2xl font-bold text-balance md:text-3xl lg:text-4xl xl:text-5xl\">\r\n                        <m.span\r\n                            variants={variants as Variants}\r\n                            custom={0}\r\n                            initial=\"hidden\"\r\n                            animate=\"visible\"\r\n                        >\r\n                            Starterkits.\r\n                        </m.span>{' '}\r\n                        <m.span\r\n                            variants={variants as Variants}\r\n                            custom={1}\r\n                            initial=\"hidden\"\r\n                            animate=\"visible\"\r\n                        >\r\n                            Components.\r\n                        </m.span>{' '}\r\n                        <m.span\r\n                            variants={variants as Variants}\r\n                            custom={2}\r\n                            initial=\"hidden\"\r\n                            animate=\"visible\"\r\n                        >\r\n                            Blocks.\r\n                        </m.span>\r\n                    </h1>\r\n                    <m.p\r\n                        variants={variants as Variants}\r\n                        custom={3}\r\n                        initial=\"hidden\"\r\n                        animate=\"visible\"\r\n                        className=\"text-muted-foreground max-w-2xl text-center text-sm font-semibold text-balance md:text-base lg:text-lg\"\r\n                    >\r\n                        \"Build faster with free{' '}\r\n                        <span className=\"text-foreground\">Starter kits</span>,\r\n                        Re-usable{' '}\r\n                        <span className=\"text-foreground\">Components</span>, and\r\n                        modular <span className=\"text-foreground\">Blocks</span>.\r\n                        Everything you need from{' '}\r\n                        <span className=\"text-foreground\">MVP</span> to\r\n                        <span className=\"text-foreground\">\r\n                            {' '}\r\n                            production-ready applications.\r\n                        </span>\r\n                        \"\r\n                    </m.p>\r\n                    <div className=\"flex flex-col items-center gap-2 sm:flex-row\">\r\n                        <m.div\r\n                            variants={variants as Variants}\r\n                            custom={4}\r\n                            initial=\"hidden\"\r\n                            animate=\"visible\"\r\n                            className=\"w-full sm:w-fit\"\r\n                        >\r\n                            <Link\r\n                                href=\"#\"\r\n                                className={cn(\r\n                                    buttonVariants({\r\n                                        size: 'sm',\r\n                                        className:\r\n                                            'w-full sm:h-10 sm:w-fit sm:px-6 sm:has-[>svg]:px-4',\r\n                                    })\r\n                                )}\r\n                            >\r\n                                Pro Toolkit\r\n                            </Link>\r\n                        </m.div>\r\n                        <m.div\r\n                            variants={variants as Variants}\r\n                            custom={5}\r\n                            initial=\"hidden\"\r\n                            animate=\"visible\"\r\n                            className=\"w-full sm:w-fit\"\r\n                        >\r\n                            <Link\r\n                                href=\"#\"\r\n                                className={cn(\r\n                                    buttonVariants({\r\n                                        size: 'sm',\r\n                                        variant: 'secondary',\r\n                                        className:\r\n                                            'w-full sm:h-10 sm:w-fit sm:px-6 sm:has-[>svg]:px-4',\r\n                                    })\r\n                                )}\r\n                            >\r\n                                Browse Free Resources\r\n                            </Link>\r\n                        </m.div>\r\n                    </div>\r\n\r\n                    {/* Faded Lines on content */}\r\n                    <FadeLine\r\n                        className=\"absolute -top-10 -left-1/4\"\r\n                        opacity={0.2}\r\n                        fadeWidth=\"10%\"\r\n                        width=\"150%\"\r\n                        height=\"1px\"\r\n                        orientation=\"horizontal\"\r\n                        delay={0}\r\n                    />\r\n\r\n                    <FadeLine\r\n                        className=\"absolute -bottom-10 -left-1/4\"\r\n                        opacity={0.2}\r\n                        fadeWidth=\"10%\"\r\n                        width=\"150%\"\r\n                        height=\"1px\"\r\n                        orientation=\"horizontal\"\r\n                        delay={0.1}\r\n                    />\r\n\r\n                    <FadeLine\r\n                        className=\"absolute -top-14 -left-1/4\"\r\n                        opacity={0.2}\r\n                        fadeWidth=\"10%\"\r\n                        width=\"150%\"\r\n                        height=\"1px\"\r\n                        orientation=\"horizontal\"\r\n                        delay={0.2}\r\n                    />\r\n\r\n                    <FadeLine\r\n                        className=\"absolute -bottom-14 -left-1/4\"\r\n                        opacity={0.2}\r\n                        fadeWidth=\"10%\"\r\n                        width=\"150%\"\r\n                        height=\"1px\"\r\n                        orientation=\"horizontal\"\r\n                        delay={0.3}\r\n                    />\r\n\r\n                    <FadeLine\r\n                        className=\"absolute -top-3/4 left-0 md:-left-10\"\r\n                        fadeWidth=\"15%\"\r\n                        opacity={0.2}\r\n                        width=\"1px\"\r\n                        height=\"250%\"\r\n                        orientation=\"vertical\"\r\n                        delay={0.4}\r\n                    />\r\n\r\n                    <FadeLine\r\n                        className=\"absolute -top-3/4 right-0 md:-right-10\"\r\n                        fadeWidth=\"15%\"\r\n                        opacity={0.2}\r\n                        width=\"1px\"\r\n                        height=\"250%\"\r\n                        orientation=\"vertical\"\r\n                        delay={0.5}\r\n                    />\r\n\r\n                    <FadeLine\r\n                        className=\"absolute -top-3/4 left-4 md:-left-14\"\r\n                        fadeWidth=\"15%\"\r\n                        opacity={0.2}\r\n                        width=\"1px\"\r\n                        height=\"250%\"\r\n                        orientation=\"vertical\"\r\n                        delay={0.6}\r\n                    />\r\n\r\n                    <FadeLine\r\n                        className=\"absolute -top-3/4 right-4 md:-right-14\"\r\n                        fadeWidth=\"15%\"\r\n                        opacity={0.2}\r\n                        width=\"1px\"\r\n                        height=\"250%\"\r\n                        orientation=\"vertical\"\r\n                        delay={0.7}\r\n                    />\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface FadeLineProps {\r\n    className?: string\r\n    color?: string\r\n    fadeWidth?: string\r\n    orientation: 'horizontal' | 'vertical'\r\n    opacity?: number\r\n    width: string\r\n    height?: string\r\n    delay?: number\r\n}\r\n\r\nfunction FadeLine({\r\n    className = '',\r\n    color = 'var(--foreground)',\r\n    fadeWidth = '25%',\r\n    orientation,\r\n    opacity = 1,\r\n    width,\r\n    height,\r\n    delay = 0,\r\n}: FadeLineProps) {\r\n    const gradientDirection =\r\n        orientation === 'vertical' ? 'to bottom' : 'to right'\r\n\r\n    const animationProps =\r\n        orientation === 'vertical'\r\n            ? {\r\n                  initial: { height: 0 },\r\n                  animate: { height },\r\n                  transition: {\r\n                      duration: 1.5,\r\n                      delay: delay + totalDelay,\r\n                      ease: 'easeOut' as const,\r\n                  },\r\n              }\r\n            : {\r\n                  initial: { width: 0 },\r\n                  animate: { width },\r\n                  transition: {\r\n                      duration: 1.5,\r\n                      delay: delay + totalDelay,\r\n                      ease: 'easeOut' as const,\r\n                  },\r\n              }\r\n\r\n    return (\r\n        <m.span\r\n            {...animationProps}\r\n            className={`${className}`}\r\n            style={{\r\n                background: `linear-gradient(${gradientDirection}, transparent 0%, ${color} ${fadeWidth}, ${color} calc(100% - ${fadeWidth}), transparent 100%)`,\r\n                opacity,\r\n                width,\r\n                height,\r\n            }}\r\n        />\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/hero.tsx"
    },
    {
      "path": "registry/default/blocks/hero-sections/center-content-hero/header.tsx",
      "content": "'use client'\r\n\r\nimport { Button, buttonVariants } from '@/components/ui/button'\r\nimport { cn } from '@/lib/utils'\r\nimport Link, { LinkProps } from 'next/link'\r\nimport React from 'react'\r\nimport {\r\n    Popover,\r\n    PopoverContent,\r\n    PopoverTrigger,\r\n} from '@/components/ui/popover'\r\n\r\nconst navLinks = [\r\n    {\r\n        href: '#',\r\n        label: 'Features',\r\n    },\r\n    {\r\n        href: '#',\r\n        label: 'About',\r\n    },\r\n    {\r\n        href: '#',\r\n        label: 'Pricing',\r\n    },\r\n    {\r\n        href: '#',\r\n        label: 'Contact',\r\n    },\r\n    {\r\n        href: '#',\r\n        label: 'Teams',\r\n    },\r\n]\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header className=\"bg-background sticky top-0 z-20 container grid h-14 w-full grid-cols-2 gap-4 md:grid-cols-5\">\r\n            <div className=\"flex items-center justify-start gap-4\">\r\n                <MobileNav />\r\n                <Link\r\n                    href=\"#\"\r\n                    className=\"focus-visible:border-ring focus-visible:ring-ring/50 flex text-lg font-bold outline-none focus-visible:ring-[3px]\"\r\n                >\r\n                    Acme\r\n                </Link>\r\n            </div>\r\n\r\n            <nav className=\"col-span-3 hidden place-items-center md:grid\">\r\n                <ul className=\"flex items-center gap-2\">\r\n                    {navLinks.map((link) => (\r\n                        <li key={link.label} className=\"inline-block\">\r\n                            <Link\r\n                                href={link.href}\r\n                                className={cn(\r\n                                    buttonVariants({\r\n                                        variant: 'ghost',\r\n                                        size: 'sm',\r\n                                    })\r\n                                )}\r\n                            >\r\n                                {link.label}\r\n                            </Link>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </nav>\r\n\r\n            <div className=\"flex items-center justify-end gap-2\">\r\n                <Link\r\n                    href=\"#\"\r\n                    className={cn(\r\n                        buttonVariants({ variant: 'ghost', size: 'sm' })\r\n                    )}\r\n                >\r\n                    Log in\r\n                </Link>\r\n                <Link href=\"#\" className={cn(buttonVariants({ size: 'sm' }))}>\r\n                    Sign up\r\n                </Link>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nfunction MobileNav() {\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    return (\r\n        <Popover open={open} onOpenChange={setOpen}>\r\n            <PopoverTrigger asChild>\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    className={cn(\r\n                        'extend-touch-target block h-8 touch-manipulation items-center justify-start gap-2.5 !p-0 hover:bg-transparent focus-visible:bg-transparent focus-visible:ring-0 active:bg-transparent md:hidden dark:hover:bg-transparent'\r\n                    )}\r\n                >\r\n                    <div className=\"relative flex h-8 w-4 items-center justify-center\">\r\n                        <div className=\"relative size-4\">\r\n                            <span\r\n                                className={cn(\r\n                                    'bg-foreground absolute left-0 block h-0.5 w-4 transition-all duration-100',\r\n                                    open ? 'top-[0.4rem] -rotate-45' : 'top-1'\r\n                                )}\r\n                            />\r\n                            <span\r\n                                className={cn(\r\n                                    'bg-foreground absolute left-0 block h-0.5 w-4 transition-all duration-100',\r\n                                    open ? 'top-[0.4rem] rotate-45' : 'top-2.5'\r\n                                )}\r\n                            />\r\n                        </div>\r\n                        <span className=\"sr-only\">Toggle Menu</span>\r\n                    </div>\r\n                </Button>\r\n            </PopoverTrigger>\r\n            <PopoverContent\r\n                className=\"bg-background/90 no-scrollbar h-(--radix-popover-content-available-height) w-(--radix-popover-content-available-width) overflow-y-auto rounded-none border-none p-0 shadow-none backdrop-blur duration-100\"\r\n                align=\"start\"\r\n                side=\"bottom\"\r\n                alignOffset={-16}\r\n                sideOffset={14}\r\n            >\r\n                <div className=\"flex flex-col gap-12 overflow-auto px-6 py-6\">\r\n                    <div className=\"flex flex-col gap-4\">\r\n                        <div className=\"text-muted-foreground text-sm font-medium\">\r\n                            Menu\r\n                        </div>\r\n                        <div className=\"flex flex-col gap-3\">\r\n                            {navLinks.map((item, index) => (\r\n                                <MobileLink\r\n                                    key={index}\r\n                                    href={item.href}\r\n                                    onOpenChange={setOpen}\r\n                                >\r\n                                    {item.label}\r\n                                </MobileLink>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </PopoverContent>\r\n        </Popover>\r\n    )\r\n}\r\n\r\nfunction MobileLink({\r\n    href,\r\n    onOpenChange,\r\n    className,\r\n    children,\r\n    ...props\r\n}: LinkProps & {\r\n    onOpenChange?: (open: boolean) => void\r\n    children: React.ReactNode\r\n    className?: string\r\n}) {\r\n    return (\r\n        <Link\r\n            href={href}\r\n            className={cn('text-2xl font-medium', className)}\r\n            {...props}\r\n        >\r\n            {children}\r\n        </Link>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/header.tsx"
    },
    {
      "path": "registry\\default\\blocks\\hero-sections\\center-content-hero\\hero.tsx",
      "content": "'use client'\r\n\r\nimport Link from 'next/link'\r\nimport Header from '@/registry/default/blocks/hero-sections/center-content-hero/header'\r\nimport { cn } from '@/lib/utils'\r\nimport { buttonVariants } from '@/components/ui/button'\r\nimport { InteractiveGridPattern } from '@/components/ui/interactive-grid-pattern'\r\nimport { motion as m, Variants } from 'motion/react'\r\n\r\nconst staggerDelay = 0.4\r\nconst initialDelay = 0.2 // initial delay before the first element animates\r\nconst totalDelay = initialDelay + staggerDelay * 6 // number of elements animating\r\n\r\nexport default function Hero() {\r\n    const variants = {\r\n        hidden: () => ({\r\n            opacity: 0,\r\n            filter: 'blur(10px)',\r\n            transform: 'translateY(10px) scale(0.95)',\r\n        }),\r\n        visible: (custom: number) => ({\r\n            opacity: 1,\r\n            transform: 'translateY(0) scale(1)',\r\n            filter: 'blur(0)',\r\n            transition: {\r\n                delay: custom * staggerDelay + initialDelay,\r\n                duration: 0.5,\r\n                ease: 'easeInOut',\r\n            },\r\n        }),\r\n    }\r\n\r\n    return (\r\n        <div className=\"relative flex min-h-svh w-full flex-col items-center justify-between\">\r\n            <InteractiveGridPattern\r\n                width={100}\r\n                height={100}\r\n                squares={[80, 80]}\r\n                squaresClassName=\"hover:fill-muted\"\r\n                className=\"opacity-40 dark:opacity-30\"\r\n            />\r\n            {/* Header */}\r\n            <Header />\r\n\r\n            {/* Hero Section */}\r\n            <section className=\"container flex w-full flex-1 items-center justify-center overflow-hidden\">\r\n                <div className=\"relative flex flex-col items-center justify-center gap-6\">\r\n                    <h1 className=\"text-center text-2xl font-bold text-balance md:text-3xl lg:text-4xl xl:text-5xl\">\r\n                        <m.span\r\n                            variants={variants as Variants}\r\n                            custom={0}\r\n                            initial=\"hidden\"\r\n                            animate=\"visible\"\r\n                        >\r\n                            Starterkits.\r\n                        </m.span>{' '}\r\n                        <m.span\r\n                            variants={variants as Variants}\r\n                            custom={1}\r\n                            initial=\"hidden\"\r\n                            animate=\"visible\"\r\n                        >\r\n                            Components.\r\n                        </m.span>{' '}\r\n                        <m.span\r\n                            variants={variants as Variants}\r\n                            custom={2}\r\n                            initial=\"hidden\"\r\n                            animate=\"visible\"\r\n                        >\r\n                            Blocks.\r\n                        </m.span>\r\n                    </h1>\r\n                    <m.p\r\n                        variants={variants as Variants}\r\n                        custom={3}\r\n                        initial=\"hidden\"\r\n                        animate=\"visible\"\r\n                        className=\"text-muted-foreground max-w-2xl text-center text-sm font-semibold text-balance md:text-base lg:text-lg\"\r\n                    >\r\n                        \"Build faster with free{' '}\r\n                        <span className=\"text-foreground\">Starter kits</span>,\r\n                        Re-usable{' '}\r\n                        <span className=\"text-foreground\">Components</span>, and\r\n                        modular <span className=\"text-foreground\">Blocks</span>.\r\n                        Everything you need from{' '}\r\n                        <span className=\"text-foreground\">MVP</span> to\r\n                        <span className=\"text-foreground\">\r\n                            {' '}\r\n                            production-ready applications.\r\n                        </span>\r\n                        \"\r\n                    </m.p>\r\n                    <div className=\"flex flex-col items-center gap-2 sm:flex-row\">\r\n                        <m.div\r\n                            variants={variants as Variants}\r\n                            custom={4}\r\n                            initial=\"hidden\"\r\n                            animate=\"visible\"\r\n                            className=\"w-full sm:w-fit\"\r\n                        >\r\n                            <Link\r\n                                href=\"#\"\r\n                                className={cn(\r\n                                    buttonVariants({\r\n                                        size: 'sm',\r\n                                        className:\r\n                                            'w-full sm:h-10 sm:w-fit sm:px-6 sm:has-[>svg]:px-4',\r\n                                    })\r\n                                )}\r\n                            >\r\n                                Pro Toolkit\r\n                            </Link>\r\n                        </m.div>\r\n                        <m.div\r\n                            variants={variants as Variants}\r\n                            custom={5}\r\n                            initial=\"hidden\"\r\n                            animate=\"visible\"\r\n                            className=\"w-full sm:w-fit\"\r\n                        >\r\n                            <Link\r\n                                href=\"#\"\r\n                                className={cn(\r\n                                    buttonVariants({\r\n                                        size: 'sm',\r\n                                        variant: 'secondary',\r\n                                        className:\r\n                                            'w-full sm:h-10 sm:w-fit sm:px-6 sm:has-[>svg]:px-4',\r\n                                    })\r\n                                )}\r\n                            >\r\n                                Browse Free Resources\r\n                            </Link>\r\n                        </m.div>\r\n                    </div>\r\n\r\n                    {/* Faded Lines on content */}\r\n                    <FadeLine\r\n                        className=\"absolute -top-10 -left-1/4\"\r\n                        opacity={0.2}\r\n                        fadeWidth=\"10%\"\r\n                        width=\"150%\"\r\n                        height=\"1px\"\r\n                        orientation=\"horizontal\"\r\n                        delay={0}\r\n                    />\r\n\r\n                    <FadeLine\r\n                        className=\"absolute -bottom-10 -left-1/4\"\r\n                        opacity={0.2}\r\n                        fadeWidth=\"10%\"\r\n                        width=\"150%\"\r\n                        height=\"1px\"\r\n                        orientation=\"horizontal\"\r\n                        delay={0.1}\r\n                    />\r\n\r\n                    <FadeLine\r\n                        className=\"absolute -top-14 -left-1/4\"\r\n                        opacity={0.2}\r\n                        fadeWidth=\"10%\"\r\n                        width=\"150%\"\r\n                        height=\"1px\"\r\n                        orientation=\"horizontal\"\r\n                        delay={0.2}\r\n                    />\r\n\r\n                    <FadeLine\r\n                        className=\"absolute -bottom-14 -left-1/4\"\r\n                        opacity={0.2}\r\n                        fadeWidth=\"10%\"\r\n                        width=\"150%\"\r\n                        height=\"1px\"\r\n                        orientation=\"horizontal\"\r\n                        delay={0.3}\r\n                    />\r\n\r\n                    <FadeLine\r\n                        className=\"absolute -top-3/4 left-0 md:-left-10\"\r\n                        fadeWidth=\"15%\"\r\n                        opacity={0.2}\r\n                        width=\"1px\"\r\n                        height=\"250%\"\r\n                        orientation=\"vertical\"\r\n                        delay={0.4}\r\n                    />\r\n\r\n                    <FadeLine\r\n                        className=\"absolute -top-3/4 right-0 md:-right-10\"\r\n                        fadeWidth=\"15%\"\r\n                        opacity={0.2}\r\n                        width=\"1px\"\r\n                        height=\"250%\"\r\n                        orientation=\"vertical\"\r\n                        delay={0.5}\r\n                    />\r\n\r\n                    <FadeLine\r\n                        className=\"absolute -top-3/4 left-4 md:-left-14\"\r\n                        fadeWidth=\"15%\"\r\n                        opacity={0.2}\r\n                        width=\"1px\"\r\n                        height=\"250%\"\r\n                        orientation=\"vertical\"\r\n                        delay={0.6}\r\n                    />\r\n\r\n                    <FadeLine\r\n                        className=\"absolute -top-3/4 right-4 md:-right-14\"\r\n                        fadeWidth=\"15%\"\r\n                        opacity={0.2}\r\n                        width=\"1px\"\r\n                        height=\"250%\"\r\n                        orientation=\"vertical\"\r\n                        delay={0.7}\r\n                    />\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface FadeLineProps {\r\n    className?: string\r\n    color?: string\r\n    fadeWidth?: string\r\n    orientation: 'horizontal' | 'vertical'\r\n    opacity?: number\r\n    width: string\r\n    height?: string\r\n    delay?: number\r\n}\r\n\r\nfunction FadeLine({\r\n    className = '',\r\n    color = 'var(--foreground)',\r\n    fadeWidth = '25%',\r\n    orientation,\r\n    opacity = 1,\r\n    width,\r\n    height,\r\n    delay = 0,\r\n}: FadeLineProps) {\r\n    const gradientDirection =\r\n        orientation === 'vertical' ? 'to bottom' : 'to right'\r\n\r\n    const animationProps =\r\n        orientation === 'vertical'\r\n            ? {\r\n                  initial: { height: 0 },\r\n                  animate: { height },\r\n                  transition: {\r\n                      duration: 1.5,\r\n                      delay: delay + totalDelay,\r\n                      ease: 'easeOut' as const,\r\n                  },\r\n              }\r\n            : {\r\n                  initial: { width: 0 },\r\n                  animate: { width },\r\n                  transition: {\r\n                      duration: 1.5,\r\n                      delay: delay + totalDelay,\r\n                      ease: 'easeOut' as const,\r\n                  },\r\n              }\r\n\r\n    return (\r\n        <m.span\r\n            {...animationProps}\r\n            className={`${className}`}\r\n            style={{\r\n                background: `linear-gradient(${gradientDirection}, transparent 0%, ${color} ${fadeWidth}, ${color} calc(100% - ${fadeWidth}), transparent 100%)`,\r\n                opacity,\r\n                width,\r\n                height,\r\n            }}\r\n        />\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry\\default\\blocks\\hero-sections\\center-content-hero\\header.tsx",
      "content": "'use client'\r\n\r\nimport { Button, buttonVariants } from '@/components/ui/button'\r\nimport { cn } from '@/lib/utils'\r\nimport Link, { LinkProps } from 'next/link'\r\nimport React from 'react'\r\nimport {\r\n    Popover,\r\n    PopoverContent,\r\n    PopoverTrigger,\r\n} from '@/components/ui/popover'\r\n\r\nconst navLinks = [\r\n    {\r\n        href: '#',\r\n        label: 'Features',\r\n    },\r\n    {\r\n        href: '#',\r\n        label: 'About',\r\n    },\r\n    {\r\n        href: '#',\r\n        label: 'Pricing',\r\n    },\r\n    {\r\n        href: '#',\r\n        label: 'Contact',\r\n    },\r\n    {\r\n        href: '#',\r\n        label: 'Teams',\r\n    },\r\n]\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header className=\"bg-background sticky top-0 z-20 container grid h-14 w-full grid-cols-2 gap-4 md:grid-cols-5\">\r\n            <div className=\"flex items-center justify-start gap-4\">\r\n                <MobileNav />\r\n                <Link\r\n                    href=\"#\"\r\n                    className=\"focus-visible:border-ring focus-visible:ring-ring/50 flex text-lg font-bold outline-none focus-visible:ring-[3px]\"\r\n                >\r\n                    Acme\r\n                </Link>\r\n            </div>\r\n\r\n            <nav className=\"col-span-3 hidden place-items-center md:grid\">\r\n                <ul className=\"flex items-center gap-2\">\r\n                    {navLinks.map((link) => (\r\n                        <li key={link.label} className=\"inline-block\">\r\n                            <Link\r\n                                href={link.href}\r\n                                className={cn(\r\n                                    buttonVariants({\r\n                                        variant: 'ghost',\r\n                                        size: 'sm',\r\n                                    })\r\n                                )}\r\n                            >\r\n                                {link.label}\r\n                            </Link>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </nav>\r\n\r\n            <div className=\"flex items-center justify-end gap-2\">\r\n                <Link\r\n                    href=\"#\"\r\n                    className={cn(\r\n                        buttonVariants({ variant: 'ghost', size: 'sm' })\r\n                    )}\r\n                >\r\n                    Log in\r\n                </Link>\r\n                <Link href=\"#\" className={cn(buttonVariants({ size: 'sm' }))}>\r\n                    Sign up\r\n                </Link>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nfunction MobileNav() {\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    return (\r\n        <Popover open={open} onOpenChange={setOpen}>\r\n            <PopoverTrigger asChild>\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    className={cn(\r\n                        'extend-touch-target block h-8 touch-manipulation items-center justify-start gap-2.5 !p-0 hover:bg-transparent focus-visible:bg-transparent focus-visible:ring-0 active:bg-transparent md:hidden dark:hover:bg-transparent'\r\n                    )}\r\n                >\r\n                    <div className=\"relative flex h-8 w-4 items-center justify-center\">\r\n                        <div className=\"relative size-4\">\r\n                            <span\r\n                                className={cn(\r\n                                    'bg-foreground absolute left-0 block h-0.5 w-4 transition-all duration-100',\r\n                                    open ? 'top-[0.4rem] -rotate-45' : 'top-1'\r\n                                )}\r\n                            />\r\n                            <span\r\n                                className={cn(\r\n                                    'bg-foreground absolute left-0 block h-0.5 w-4 transition-all duration-100',\r\n                                    open ? 'top-[0.4rem] rotate-45' : 'top-2.5'\r\n                                )}\r\n                            />\r\n                        </div>\r\n                        <span className=\"sr-only\">Toggle Menu</span>\r\n                    </div>\r\n                </Button>\r\n            </PopoverTrigger>\r\n            <PopoverContent\r\n                className=\"bg-background/90 no-scrollbar h-(--radix-popover-content-available-height) w-(--radix-popover-content-available-width) overflow-y-auto rounded-none border-none p-0 shadow-none backdrop-blur duration-100\"\r\n                align=\"start\"\r\n                side=\"bottom\"\r\n                alignOffset={-16}\r\n                sideOffset={14}\r\n            >\r\n                <div className=\"flex flex-col gap-12 overflow-auto px-6 py-6\">\r\n                    <div className=\"flex flex-col gap-4\">\r\n                        <div className=\"text-muted-foreground text-sm font-medium\">\r\n                            Menu\r\n                        </div>\r\n                        <div className=\"flex flex-col gap-3\">\r\n                            {navLinks.map((item, index) => (\r\n                                <MobileLink\r\n                                    key={index}\r\n                                    href={item.href}\r\n                                    onOpenChange={setOpen}\r\n                                >\r\n                                    {item.label}\r\n                                </MobileLink>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </PopoverContent>\r\n        </Popover>\r\n    )\r\n}\r\n\r\nfunction MobileLink({\r\n    href,\r\n    onOpenChange,\r\n    className,\r\n    children,\r\n    ...props\r\n}: LinkProps & {\r\n    onOpenChange?: (open: boolean) => void\r\n    children: React.ReactNode\r\n    className?: string\r\n}) {\r\n    return (\r\n        <Link\r\n            href={href}\r\n            className={cn('text-2xl font-medium', className)}\r\n            {...props}\r\n        >\r\n            {children}\r\n        </Link>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\interactive-grid-pattern.tsx",
      "content": "'use client'\r\n\r\nimport { cn } from '@/lib/utils'\r\nimport React, { useState } from 'react'\r\n\r\n/**\r\n * InteractiveGridPattern is a component that renders a grid pattern with interactive squares.\r\n *\r\n * @param width - The width of each square.\r\n * @param height - The height of each square.\r\n * @param squares - The number of squares in the grid. The first element is the number of horizontal squares, and the second element is the number of vertical squares.\r\n * @param className - The class name of the grid.\r\n * @param squaresClassName - The class name of the squares.\r\n */\r\ninterface InteractiveGridPatternProps extends React.SVGProps<SVGSVGElement> {\r\n    width?: number\r\n    height?: number\r\n    squares?: [number, number] // [horizontal, vertical]\r\n    className?: string\r\n    squaresClassName?: string\r\n}\r\n\r\n/**\r\n * The InteractiveGridPattern component.\r\n *\r\n * @see InteractiveGridPatternProps for the props interface.\r\n * @returns A React component.\r\n */\r\nexport function InteractiveGridPattern({\r\n    width = 40,\r\n    height = 40,\r\n    squares = [24, 24],\r\n    className,\r\n    squaresClassName,\r\n    ...props\r\n}: InteractiveGridPatternProps) {\r\n    const [horizontal, vertical] = squares\r\n    const [hoveredSquare, setHoveredSquare] = useState<number | null>(null)\r\n\r\n    return (\r\n        <svg\r\n            width={width * horizontal}\r\n            height={height * vertical}\r\n            className={cn(\r\n                'border-border absolute inset-0 h-full w-full border',\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            {Array.from({ length: horizontal * vertical }).map((_, index) => {\r\n                const x = (index % horizontal) * width\r\n                const y = Math.floor(index / horizontal) * height\r\n                return (\r\n                    <rect\r\n                        key={index}\r\n                        x={x}\r\n                        y={y}\r\n                        width={width}\r\n                        height={height}\r\n                        className={cn(\r\n                            'stroke-border transition-all duration-100 ease-in-out [&:not(:hover)]:duration-1000',\r\n                            hoveredSquare === index\r\n                                ? 'fill-border'\r\n                                : 'fill-transparent',\r\n                            squaresClassName\r\n                        )}\r\n                        onMouseEnter={() => setHoveredSquare(index)}\r\n                        onMouseLeave={() => setHoveredSquare(null)}\r\n                    />\r\n                )\r\n            })}\r\n        </svg>\r\n    )\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\button.tsx",
      "content": "import * as React from 'react'\r\nimport { Slot } from '@radix-ui/react-slot'\r\nimport { cva, type VariantProps } from 'class-variance-authority'\r\n\r\nimport { cn } from '@/lib/utils'\r\n\r\nconst buttonVariants = cva(\r\n    \"inline-flex items-center relative justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive group\",\r\n    {\r\n        variants: {\r\n            variant: {\r\n                default:\r\n                    'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\r\n                destructive:\r\n                    'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\r\n                outline:\r\n                    'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\r\n                secondary:\r\n                    'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\r\n                ghost: 'hover:bg-accent hover:text-accent-foreground',\r\n                link: 'text-primary underline-offset-4 hover:underline',\r\n                defaultWithOutline:\r\n                    'bg-transparent text-primary-foreground border border-border hover:border-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50 dark:text-primary-foreground before:-z-10 before:content-[\"\"] before:absolute before:top-1/2 before:left-1/2 dark:hover:border-foreground before:-translate-x-1/2 before:-translate-y-1/2 before:w-[calc(100%-6px)] before:h-[calc(100%-6px)] before:rounded-sm before:bg-primary  before:transition-colors duration-500',\r\n                secondaryWithOutline:\r\n                    'bg-transparent text-secondary-foreground border border-border hover:border-foreground dark:bg-input/30 dark:border-input dark:hover:border-primary dark:hover:bg-input/50 dark:text-secondary-foreground before:-z-10 before:content-[\"\"] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-[calc(100%-6px)] before:h-[calc(100%-6px)] before:rounded-sm before:bg-secondary before:transition-colors duration-500',\r\n            },\r\n            size: {\r\n                default: 'h-9 px-4 py-2 has-[>svg]:px-3',\r\n                sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\r\n                lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\r\n                xl: 'h-12 rounded-md px-8 has-[>svg]:px-6',\r\n                icon: 'size-9',\r\n                iconSm: 'size-8',\r\n                iconXsm: 'size-5',\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            variant: 'default',\r\n            size: 'default',\r\n        },\r\n    }\r\n)\r\n\r\nfunction Button({\r\n    className,\r\n    variant,\r\n    size,\r\n    asChild = false,\r\n    ...props\r\n}: React.ComponentProps<'button'> &\r\n    VariantProps<typeof buttonVariants> & {\r\n        asChild?: boolean\r\n    }) {\r\n    const Comp = asChild ? Slot : 'button'\r\n\r\n    return (\r\n        <Comp\r\n            data-slot=\"button\"\r\n            className={cn(buttonVariants({ variant, size, className }))}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nexport { Button, buttonVariants }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\popover.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nfunction Popover({\r\n  ...props\r\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\r\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\r\n}\r\n\r\nfunction PopoverTrigger({\r\n  ...props\r\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\r\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\r\n}\r\n\r\nfunction PopoverContent({\r\n  className,\r\n  align = \"center\",\r\n  sideOffset = 4,\r\n  ...props\r\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\r\n  return (\r\n    <PopoverPrimitive.Portal>\r\n      <PopoverPrimitive.Content\r\n        data-slot=\"popover-content\"\r\n        align={align}\r\n        sideOffset={sideOffset}\r\n        className={cn(\r\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\r\n          className\r\n        )}\r\n        {...props}\r\n      />\r\n    </PopoverPrimitive.Portal>\r\n  )\r\n}\r\n\r\nfunction PopoverAnchor({\r\n  ...props\r\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\r\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\r\n}\r\n\r\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx'\r\nimport { twMerge } from 'tailwind-merge'\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n    return twMerge(clsx(inputs))\r\n}\r\n\r\nexport const convertRegistryPaths = (content: string): string => {\r\n    return content\r\n        .replace(/@\\/registry\\/default\\/ui/g, '@/components/ui')\r\n        .replace(/@\\/registry\\/default\\/hooks/g, '@/hooks')\r\n        .replace(/@\\/registry\\/default\\/lib/g, '@/lib')\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}