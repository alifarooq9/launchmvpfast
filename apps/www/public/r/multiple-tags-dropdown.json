{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multiple-tags-dropdown",
  "type": "registry:component",
  "title": "Multiple Tags Dropdown",
  "description": "A dropdown menu for selecting multiple tags",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-dropdown-menu",
    "lucide-react",
    "@radix-ui/react-label",
    "react-hook-form",
    "zod",
    "@hookform/resolvers"
  ],
  "files": [
    {
      "path": "registry/default/components/dropdown-menu/multiple-tags-dropdown.tsx",
      "content": "'use client'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport {\r\n    DropdownMenu,\r\n    DropdownMenuContent,\r\n    DropdownMenuItem,\r\n    DropdownMenuLabel,\r\n    DropdownMenuSeparator,\r\n    DropdownMenuTrigger,\r\n} from '@/components/ui/dropdown-menu'\r\nimport { Input } from '@/components/ui/input'\r\nimport { cn } from '@/lib/utils'\r\nimport { ChevronDownIcon, PlusIcon, XIcon } from 'lucide-react'\r\nimport {\r\n    Form,\r\n    FormControl,\r\n    FormField,\r\n    FormItem,\r\n    FormMessage,\r\n} from '@/components/ui/form'\r\nimport React from 'react'\r\nimport { z } from 'zod'\r\nimport { useForm } from 'react-hook-form'\r\nimport { zodResolver } from '@hookform/resolvers/zod'\r\nimport { Badge } from '@/components/ui/badge'\r\n\r\nconst defaultTags = [\r\n    {\r\n        id: 'frontend',\r\n        label: 'Frontend',\r\n    },\r\n    {\r\n        id: 'backend',\r\n        label: 'Backend',\r\n    },\r\n    {\r\n        id: 'design',\r\n        label: 'Design',\r\n    },\r\n    {\r\n        id: 'devops',\r\n        label: 'DevOps',\r\n    },\r\n    {\r\n        id: 'qa',\r\n        label: 'QA',\r\n    },\r\n    {\r\n        id: 'operations',\r\n        label: 'Operations',\r\n    },\r\n]\r\n\r\ntype MultipleTagsDropdownProps = {\r\n    side: 'left' | 'right' | 'top' | 'bottom'\r\n    align: 'start' | 'center' | 'end'\r\n}\r\n\r\nconst formSchema = z.object({\r\n    tag: z.string().min(1, {\r\n        message: 'Tag is required',\r\n    }),\r\n})\r\n\r\nexport default function MultipleTagsDropdown({\r\n    side = 'bottom',\r\n    align = 'center',\r\n}: MultipleTagsDropdownProps) {\r\n    const [tags, setTags] = React.useState([...defaultTags])\r\n    const [selectedTags, setSelectedTags] = React.useState<string[]>([])\r\n    const [isInputFocused, setIsInputFocused] = React.useState(false)\r\n\r\n    const handleOnSelect = (tag: { id: string; label: string }) => {\r\n        if (selectedTags.includes(tag.id)) {\r\n            return setSelectedTags(selectedTags.filter((id) => id !== tag.id))\r\n        }\r\n\r\n        setSelectedTags([...selectedTags, tag.id])\r\n    }\r\n\r\n    // Handle keyboard events when input is focused\r\n    const handleInputKeyDown = (e: React.KeyboardEvent) => {\r\n        if (isInputFocused) {\r\n            // Stop event propagation to prevent dropdown keyboard navigation\r\n            e.stopPropagation()\r\n        }\r\n    }\r\n\r\n    const form = useForm<z.infer<typeof formSchema>>({\r\n        resolver: zodResolver(formSchema),\r\n        defaultValues: {\r\n            tag: '',\r\n        },\r\n    })\r\n\r\n    const onSubmit = (data: z.infer<typeof formSchema>) => {\r\n        if (!data.tag) return\r\n        if (tags.find((tag) => tag.id === data.tag.toLowerCase())) {\r\n            return form.setValue('tag', '')\r\n        }\r\n\r\n        setTags([\r\n            ...tags,\r\n            {\r\n                id: data.tag.toLowerCase(),\r\n                label: data.tag,\r\n            },\r\n        ])\r\n        form.reset()\r\n    }\r\n\r\n    return (\r\n        <DropdownMenu>\r\n            <DropdownMenuTrigger asChild>\r\n                <Button variant=\"outline\" size=\"sm\" className=\"h-auto py-2\">\r\n                    {selectedTags.length > 0 ? (\r\n                        <div className=\"flex max-w-[150px] flex-wrap gap-1\">\r\n                            {selectedTags.map((t) => (\r\n                                <Badge key={t} variant=\"outline\">\r\n                                    {tags.find((tag) => tag.id === t)?.label}\r\n                                </Badge>\r\n                            ))}\r\n                        </div>\r\n                    ) : (\r\n                        <span>Assign Multiple Tags</span>\r\n                    )}\r\n                    <ChevronDownIcon />\r\n                </Button>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent\r\n                align={align}\r\n                side={side}\r\n                className=\"w-[200px]\"\r\n                onKeyDown={(e) => {\r\n                    // Prevent dropdown keyboard navigation when input is focused\r\n                    if (isInputFocused) {\r\n                        e.stopPropagation()\r\n                    }\r\n                }}\r\n            >\r\n                <DropdownMenuLabel>Assign team</DropdownMenuLabel>\r\n                <DropdownMenuSeparator />\r\n                <div className=\"flex max-h-[200px] flex-wrap gap-1 overflow-y-auto\">\r\n                    {tags.map((tag) => (\r\n                        <DropdownMenuItem\r\n                            key={tag.id}\r\n                            onSelect={(e) => {\r\n                                e.preventDefault()\r\n                                handleOnSelect(tag)\r\n                            }}\r\n                            className={cn(\r\n                                'bg-accent focus:bg-accent/50 cursor-pointer py-1'\r\n                            )}\r\n                        >\r\n                            {tag.label}\r\n\r\n                            {selectedTags.includes(tag.id) && <XIcon />}\r\n                        </DropdownMenuItem>\r\n                    ))}\r\n                </div>\r\n                <DropdownMenuSeparator />\r\n\r\n                <Form {...form}>\r\n                    <form\r\n                        onSubmit={form.handleSubmit(onSubmit)}\r\n                        className=\"flex justify-end gap-1 p-1\"\r\n                    >\r\n                        <FormField\r\n                            control={form.control}\r\n                            name=\"tag\"\r\n                            render={({ field }) => (\r\n                                <FormItem>\r\n                                    <FormControl>\r\n                                        <Input\r\n                                            placeholder=\"New Team\"\r\n                                            autoFocus\r\n                                            className=\"h-8\"\r\n                                            onFocus={() =>\r\n                                                setIsInputFocused(true)\r\n                                            }\r\n                                            onKeyDown={handleInputKeyDown}\r\n                                            {...field}\r\n                                            onBlur={() => {\r\n                                                setIsInputFocused(false)\r\n                                                field.onBlur()\r\n                                            }}\r\n                                        />\r\n                                    </FormControl>\r\n                                    <FormMessage />\r\n                                </FormItem>\r\n                            )}\r\n                        />\r\n                        <Button\r\n                            variant=\"outline\"\r\n                            size=\"icon\"\r\n                            className=\"h-8 w-8\"\r\n                        >\r\n                            <PlusIcon />\r\n                        </Button>\r\n                    </form>\r\n                </Form>\r\n            </DropdownMenuContent>\r\n        </DropdownMenu>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/multiple-tags-dropdown.tsx"
    },
    {
      "path": "registry\\default\\components\\dropdown-menu\\multiple-tags-dropdown.tsx",
      "content": "'use client'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport {\r\n    DropdownMenu,\r\n    DropdownMenuContent,\r\n    DropdownMenuItem,\r\n    DropdownMenuLabel,\r\n    DropdownMenuSeparator,\r\n    DropdownMenuTrigger,\r\n} from '@/components/ui/dropdown-menu'\r\nimport { Input } from '@/components/ui/input'\r\nimport { cn } from '@/lib/utils'\r\nimport { ChevronDownIcon, PlusIcon, XIcon } from 'lucide-react'\r\nimport {\r\n    Form,\r\n    FormControl,\r\n    FormField,\r\n    FormItem,\r\n    FormMessage,\r\n} from '@/components/ui/form'\r\nimport React from 'react'\r\nimport { z } from 'zod'\r\nimport { useForm } from 'react-hook-form'\r\nimport { zodResolver } from '@hookform/resolvers/zod'\r\nimport { Badge } from '@/components/ui/badge'\r\n\r\nconst defaultTags = [\r\n    {\r\n        id: 'frontend',\r\n        label: 'Frontend',\r\n    },\r\n    {\r\n        id: 'backend',\r\n        label: 'Backend',\r\n    },\r\n    {\r\n        id: 'design',\r\n        label: 'Design',\r\n    },\r\n    {\r\n        id: 'devops',\r\n        label: 'DevOps',\r\n    },\r\n    {\r\n        id: 'qa',\r\n        label: 'QA',\r\n    },\r\n    {\r\n        id: 'operations',\r\n        label: 'Operations',\r\n    },\r\n]\r\n\r\ntype MultipleTagsDropdownProps = {\r\n    side: 'left' | 'right' | 'top' | 'bottom'\r\n    align: 'start' | 'center' | 'end'\r\n}\r\n\r\nconst formSchema = z.object({\r\n    tag: z.string().min(1, {\r\n        message: 'Tag is required',\r\n    }),\r\n})\r\n\r\nexport default function MultipleTagsDropdown({\r\n    side = 'bottom',\r\n    align = 'center',\r\n}: MultipleTagsDropdownProps) {\r\n    const [tags, setTags] = React.useState([...defaultTags])\r\n    const [selectedTags, setSelectedTags] = React.useState<string[]>([])\r\n    const [isInputFocused, setIsInputFocused] = React.useState(false)\r\n\r\n    const handleOnSelect = (tag: { id: string; label: string }) => {\r\n        if (selectedTags.includes(tag.id)) {\r\n            return setSelectedTags(selectedTags.filter((id) => id !== tag.id))\r\n        }\r\n\r\n        setSelectedTags([...selectedTags, tag.id])\r\n    }\r\n\r\n    // Handle keyboard events when input is focused\r\n    const handleInputKeyDown = (e: React.KeyboardEvent) => {\r\n        if (isInputFocused) {\r\n            // Stop event propagation to prevent dropdown keyboard navigation\r\n            e.stopPropagation()\r\n        }\r\n    }\r\n\r\n    const form = useForm<z.infer<typeof formSchema>>({\r\n        resolver: zodResolver(formSchema),\r\n        defaultValues: {\r\n            tag: '',\r\n        },\r\n    })\r\n\r\n    const onSubmit = (data: z.infer<typeof formSchema>) => {\r\n        if (!data.tag) return\r\n        if (tags.find((tag) => tag.id === data.tag.toLowerCase())) {\r\n            return form.setValue('tag', '')\r\n        }\r\n\r\n        setTags([\r\n            ...tags,\r\n            {\r\n                id: data.tag.toLowerCase(),\r\n                label: data.tag,\r\n            },\r\n        ])\r\n        form.reset()\r\n    }\r\n\r\n    return (\r\n        <DropdownMenu>\r\n            <DropdownMenuTrigger asChild>\r\n                <Button variant=\"outline\" size=\"sm\" className=\"h-auto py-2\">\r\n                    {selectedTags.length > 0 ? (\r\n                        <div className=\"flex max-w-[150px] flex-wrap gap-1\">\r\n                            {selectedTags.map((t) => (\r\n                                <Badge key={t} variant=\"outline\">\r\n                                    {tags.find((tag) => tag.id === t)?.label}\r\n                                </Badge>\r\n                            ))}\r\n                        </div>\r\n                    ) : (\r\n                        <span>Assign Multiple Tags</span>\r\n                    )}\r\n                    <ChevronDownIcon />\r\n                </Button>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent\r\n                align={align}\r\n                side={side}\r\n                className=\"w-[200px]\"\r\n                onKeyDown={(e) => {\r\n                    // Prevent dropdown keyboard navigation when input is focused\r\n                    if (isInputFocused) {\r\n                        e.stopPropagation()\r\n                    }\r\n                }}\r\n            >\r\n                <DropdownMenuLabel>Assign team</DropdownMenuLabel>\r\n                <DropdownMenuSeparator />\r\n                <div className=\"flex max-h-[200px] flex-wrap gap-1 overflow-y-auto\">\r\n                    {tags.map((tag) => (\r\n                        <DropdownMenuItem\r\n                            key={tag.id}\r\n                            onSelect={(e) => {\r\n                                e.preventDefault()\r\n                                handleOnSelect(tag)\r\n                            }}\r\n                            className={cn(\r\n                                'bg-accent focus:bg-accent/50 cursor-pointer py-1'\r\n                            )}\r\n                        >\r\n                            {tag.label}\r\n\r\n                            {selectedTags.includes(tag.id) && <XIcon />}\r\n                        </DropdownMenuItem>\r\n                    ))}\r\n                </div>\r\n                <DropdownMenuSeparator />\r\n\r\n                <Form {...form}>\r\n                    <form\r\n                        onSubmit={form.handleSubmit(onSubmit)}\r\n                        className=\"flex justify-end gap-1 p-1\"\r\n                    >\r\n                        <FormField\r\n                            control={form.control}\r\n                            name=\"tag\"\r\n                            render={({ field }) => (\r\n                                <FormItem>\r\n                                    <FormControl>\r\n                                        <Input\r\n                                            placeholder=\"New Team\"\r\n                                            autoFocus\r\n                                            className=\"h-8\"\r\n                                            onFocus={() =>\r\n                                                setIsInputFocused(true)\r\n                                            }\r\n                                            onKeyDown={handleInputKeyDown}\r\n                                            {...field}\r\n                                            onBlur={() => {\r\n                                                setIsInputFocused(false)\r\n                                                field.onBlur()\r\n                                            }}\r\n                                        />\r\n                                    </FormControl>\r\n                                    <FormMessage />\r\n                                </FormItem>\r\n                            )}\r\n                        />\r\n                        <Button\r\n                            variant=\"outline\"\r\n                            size=\"icon\"\r\n                            className=\"h-8 w-8\"\r\n                        >\r\n                            <PlusIcon />\r\n                        </Button>\r\n                    </form>\r\n                </Form>\r\n            </DropdownMenuContent>\r\n        </DropdownMenu>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\button.tsx",
      "content": "import * as React from 'react'\r\nimport { Slot } from '@radix-ui/react-slot'\r\nimport { cva, type VariantProps } from 'class-variance-authority'\r\n\r\nimport { cn } from '@/lib/utils'\r\n\r\nconst buttonVariants = cva(\r\n    \"inline-flex items-center relative justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive group\",\r\n    {\r\n        variants: {\r\n            variant: {\r\n                default:\r\n                    'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\r\n                destructive:\r\n                    'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\r\n                outline:\r\n                    'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\r\n                secondary:\r\n                    'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\r\n                ghost: 'hover:bg-accent hover:text-accent-foreground',\r\n                link: 'text-primary underline-offset-4 hover:underline',\r\n                defaultWithOutline:\r\n                    'bg-transparent text-primary-foreground border border-border hover:border-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50 dark:text-primary-foreground before:-z-10 before:content-[\"\"] before:absolute before:top-1/2 before:left-1/2 dark:hover:border-foreground before:-translate-x-1/2 before:-translate-y-1/2 before:w-[calc(100%-6px)] before:h-[calc(100%-6px)] before:rounded-sm before:bg-primary  before:transition-colors duration-500',\r\n                secondaryWithOutline:\r\n                    'bg-transparent text-secondary-foreground border border-border hover:border-foreground dark:bg-input/30 dark:border-input dark:hover:border-primary dark:hover:bg-input/50 dark:text-secondary-foreground before:-z-10 before:content-[\"\"] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-[calc(100%-6px)] before:h-[calc(100%-6px)] before:rounded-sm before:bg-secondary before:transition-colors duration-500',\r\n            },\r\n            size: {\r\n                default: 'h-9 px-4 py-2 has-[>svg]:px-3',\r\n                sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\r\n                lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\r\n                xl: 'h-12 rounded-md px-8 has-[>svg]:px-6',\r\n                icon: 'size-9',\r\n                iconSm: 'size-8',\r\n                iconXsm: 'size-5',\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            variant: 'default',\r\n            size: 'default',\r\n        },\r\n    }\r\n)\r\n\r\nfunction Button({\r\n    className,\r\n    variant,\r\n    size,\r\n    asChild = false,\r\n    ...props\r\n}: React.ComponentProps<'button'> &\r\n    VariantProps<typeof buttonVariants> & {\r\n        asChild?: boolean\r\n    }) {\r\n    const Comp = asChild ? Slot : 'button'\r\n\r\n    return (\r\n        <Comp\r\n            data-slot=\"button\"\r\n            className={cn(buttonVariants({ variant, size, className }))}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nexport { Button, buttonVariants }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\dropdown-menu.tsx",
      "content": "'use client'\r\n\r\nimport * as React from 'react'\r\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'\r\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\r\n\r\nimport { cn } from '@/lib/utils'\r\n\r\nfunction DropdownMenu({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\r\n    return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\r\n}\r\n\r\nfunction DropdownMenuPortal({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Portal\r\n            data-slot=\"dropdown-menu-portal\"\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuTrigger({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Trigger\r\n            data-slot=\"dropdown-menu-trigger\"\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuContent({\r\n    className,\r\n    sideOffset = 4,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Portal>\r\n            <DropdownMenuPrimitive.Content\r\n                data-slot=\"dropdown-menu-content\"\r\n                sideOffset={sideOffset}\r\n                className={cn(\r\n                    'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\r\n                    className\r\n                )}\r\n                {...props}\r\n            />\r\n        </DropdownMenuPrimitive.Portal>\r\n    )\r\n}\r\n\r\nfunction DropdownMenuGroup({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Group\r\n            data-slot=\"dropdown-menu-group\"\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuItem({\r\n    className,\r\n    inset,\r\n    variant = 'default',\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\r\n    inset?: boolean\r\n    variant?: 'default' | 'destructive'\r\n}) {\r\n    return (\r\n        <DropdownMenuPrimitive.Item\r\n            data-slot=\"dropdown-menu-item\"\r\n            data-inset={inset}\r\n            data-variant={variant}\r\n            className={cn(\r\n                \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden transition-all select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuCheckboxItem({\r\n    className,\r\n    children,\r\n    checked,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\r\n    return (\r\n        <DropdownMenuPrimitive.CheckboxItem\r\n            data-slot=\"dropdown-menu-checkbox-item\"\r\n            className={cn(\r\n                \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n                className\r\n            )}\r\n            checked={checked}\r\n            {...props}\r\n        >\r\n            <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\r\n                <DropdownMenuPrimitive.ItemIndicator>\r\n                    <CheckIcon className=\"size-4\" />\r\n                </DropdownMenuPrimitive.ItemIndicator>\r\n            </span>\r\n            {children}\r\n        </DropdownMenuPrimitive.CheckboxItem>\r\n    )\r\n}\r\n\r\nfunction DropdownMenuRadioGroup({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\r\n    return (\r\n        <DropdownMenuPrimitive.RadioGroup\r\n            data-slot=\"dropdown-menu-radio-group\"\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuRadioItem({\r\n    className,\r\n    children,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\r\n    return (\r\n        <DropdownMenuPrimitive.RadioItem\r\n            data-slot=\"dropdown-menu-radio-item\"\r\n            className={cn(\r\n                \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\r\n                <DropdownMenuPrimitive.ItemIndicator>\r\n                    <CircleIcon className=\"size-2 fill-current\" />\r\n                </DropdownMenuPrimitive.ItemIndicator>\r\n            </span>\r\n            {children}\r\n        </DropdownMenuPrimitive.RadioItem>\r\n    )\r\n}\r\n\r\nfunction DropdownMenuLabel({\r\n    className,\r\n    inset,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\r\n    inset?: boolean\r\n}) {\r\n    return (\r\n        <DropdownMenuPrimitive.Label\r\n            data-slot=\"dropdown-menu-label\"\r\n            data-inset={inset}\r\n            className={cn(\r\n                'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuSeparator({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Separator\r\n            data-slot=\"dropdown-menu-separator\"\r\n            className={cn('bg-border -mx-1 my-1 h-px', className)}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuShortcut({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<'span'>) {\r\n    return (\r\n        <span\r\n            data-slot=\"dropdown-menu-shortcut\"\r\n            className={cn(\r\n                'text-muted-foreground border-border ml-auto flex aspect-square h-5 w-5 items-center justify-center rounded-sm border text-xs leading-none font-medium tracking-widest',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuSub({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuSubTrigger({\r\n    className,\r\n    inset,\r\n    children,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\r\n    inset?: boolean\r\n}) {\r\n    return (\r\n        <DropdownMenuPrimitive.SubTrigger\r\n            data-slot=\"dropdown-menu-sub-trigger\"\r\n            data-inset={inset}\r\n            className={cn(\r\n                'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            {children}\r\n            <ChevronRightIcon className=\"ml-auto size-4\" />\r\n        </DropdownMenuPrimitive.SubTrigger>\r\n    )\r\n}\r\n\r\nfunction DropdownMenuSubContent({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\r\n    return (\r\n        <DropdownMenuPrimitive.SubContent\r\n            data-slot=\"dropdown-menu-sub-content\"\r\n            className={cn(\r\n                'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nexport {\r\n    DropdownMenu,\r\n    DropdownMenuPortal,\r\n    DropdownMenuTrigger,\r\n    DropdownMenuContent,\r\n    DropdownMenuGroup,\r\n    DropdownMenuLabel,\r\n    DropdownMenuItem,\r\n    DropdownMenuCheckboxItem,\r\n    DropdownMenuRadioGroup,\r\n    DropdownMenuRadioItem,\r\n    DropdownMenuSeparator,\r\n    DropdownMenuShortcut,\r\n    DropdownMenuSub,\r\n    DropdownMenuSubTrigger,\r\n    DropdownMenuSubContent,\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\input.tsx",
      "content": "import * as React from 'react'\r\n\r\nimport { cn } from '@/lib/utils'\r\n\r\nfunction Input({ className, type, ...props }: React.ComponentProps<'input'>) {\r\n    return (\r\n        <input\r\n            type={type}\r\n            data-slot=\"input\"\r\n            className={cn(\r\n                'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\r\n                'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\r\n                'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nexport { Input }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\form.tsx",
      "content": "'use client'\r\n\r\nimport * as React from 'react'\r\nimport * as LabelPrimitive from '@radix-ui/react-label'\r\nimport { Slot } from '@radix-ui/react-slot'\r\nimport {\r\n    Controller,\r\n    FormProvider,\r\n    useFormContext,\r\n    useFormState,\r\n    type ControllerProps,\r\n    type FieldPath,\r\n    type FieldValues,\r\n} from 'react-hook-form'\r\n\r\nimport { cn } from '@/lib/utils'\r\nimport { Label } from '@/components/ui/label'\r\n\r\nconst Form = FormProvider\r\n\r\ntype FormFieldContextValue<\r\n    TFieldValues extends FieldValues = FieldValues,\r\n    TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\r\n> = {\r\n    name: TName\r\n}\r\n\r\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\r\n    {} as FormFieldContextValue\r\n)\r\n\r\nconst FormField = <\r\n    TFieldValues extends FieldValues = FieldValues,\r\n    TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\r\n>({\r\n    ...props\r\n}: ControllerProps<TFieldValues, TName>) => {\r\n    return (\r\n        <FormFieldContext.Provider value={{ name: props.name }}>\r\n            <Controller {...props} />\r\n        </FormFieldContext.Provider>\r\n    )\r\n}\r\n\r\nconst useFormField = () => {\r\n    const fieldContext = React.useContext(FormFieldContext)\r\n    const itemContext = React.useContext(FormItemContext)\r\n    const { getFieldState } = useFormContext()\r\n    const formState = useFormState({ name: fieldContext.name })\r\n    const fieldState = getFieldState(fieldContext.name, formState)\r\n\r\n    if (!fieldContext) {\r\n        throw new Error('useFormField should be used within <FormField>')\r\n    }\r\n\r\n    const { id } = itemContext\r\n\r\n    return {\r\n        id,\r\n        name: fieldContext.name,\r\n        formItemId: `${id}-form-item`,\r\n        formDescriptionId: `${id}-form-item-description`,\r\n        formMessageId: `${id}-form-item-message`,\r\n        ...fieldState,\r\n    }\r\n}\r\n\r\ntype FormItemContextValue = {\r\n    id: string\r\n}\r\n\r\nconst FormItemContext = React.createContext<FormItemContextValue>(\r\n    {} as FormItemContextValue\r\n)\r\n\r\nfunction FormItem({ className, ...props }: React.ComponentProps<'div'>) {\r\n    const id = React.useId()\r\n\r\n    return (\r\n        <FormItemContext.Provider value={{ id }}>\r\n            <div\r\n                data-slot=\"form-item\"\r\n                className={cn('grid gap-2', className)}\r\n                {...props}\r\n            />\r\n        </FormItemContext.Provider>\r\n    )\r\n}\r\n\r\nfunction FormLabel({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\r\n    const { error, formItemId } = useFormField()\r\n\r\n    return (\r\n        <Label\r\n            data-slot=\"form-label\"\r\n            data-error={!!error}\r\n            className={cn('data-[error=true]:text-destructive', className)}\r\n            htmlFor={formItemId}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\r\n    const { error, formItemId, formDescriptionId, formMessageId } =\r\n        useFormField()\r\n\r\n    return (\r\n        <Slot\r\n            data-slot=\"form-control\"\r\n            id={formItemId}\r\n            aria-describedby={\r\n                !error\r\n                    ? `${formDescriptionId}`\r\n                    : `${formDescriptionId} ${formMessageId}`\r\n            }\r\n            aria-invalid={!!error}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction FormDescription({ className, ...props }: React.ComponentProps<'p'>) {\r\n    const { formDescriptionId } = useFormField()\r\n\r\n    return (\r\n        <p\r\n            data-slot=\"form-description\"\r\n            id={formDescriptionId}\r\n            className={cn('text-muted-foreground text-sm', className)}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction FormMessage({ className, ...props }: React.ComponentProps<'p'>) {\r\n    const { error, formMessageId } = useFormField()\r\n    const body = error ? String(error?.message ?? '') : props.children\r\n\r\n    if (!body) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <p\r\n            data-slot=\"form-message\"\r\n            id={formMessageId}\r\n            className={cn('text-destructive text-sm', className)}\r\n            {...props}\r\n        >\r\n            {body}\r\n        </p>\r\n    )\r\n}\r\n\r\nexport {\r\n    useFormField,\r\n    Form,\r\n    FormItem,\r\n    FormLabel,\r\n    FormControl,\r\n    FormDescription,\r\n    FormMessage,\r\n    FormField,\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\badge.tsx",
      "content": "import * as React from 'react'\r\nimport { Slot } from '@radix-ui/react-slot'\r\nimport { cva, type VariantProps } from 'class-variance-authority'\r\n\r\nimport { cn } from '@/lib/utils'\r\n\r\nconst badgeVariants = cva(\r\n    'inline-flex items-center justify-center rounded-md border px-1.5 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden',\r\n    {\r\n        variants: {\r\n            variant: {\r\n                default:\r\n                    'border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90',\r\n                secondary:\r\n                    'border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90',\r\n                destructive:\r\n                    'border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\r\n                outline:\r\n                    'text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground',\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            variant: 'default',\r\n        },\r\n    }\r\n)\r\n\r\nfunction Badge({\r\n    className,\r\n    variant,\r\n    asChild = false,\r\n    ...props\r\n}: React.ComponentProps<'span'> &\r\n    VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\r\n    const Comp = asChild ? Slot : 'span'\r\n\r\n    return (\r\n        <Comp\r\n            data-slot=\"badge\"\r\n            className={cn(badgeVariants({ variant }), className)}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nexport { Badge, badgeVariants }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx'\r\nimport { twMerge } from 'tailwind-merge'\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n    return twMerge(clsx(inputs))\r\n}\r\n\r\nexport const convertRegistryPaths = (content: string): string => {\r\n    return content\r\n        .replace(/@\\/registry\\/default\\/ui/g, '@/components/ui')\r\n        .replace(/@\\/registry\\/default\\/hooks/g, '@/hooks')\r\n        .replace(/@\\/registry\\/default\\/lib/g, '@/lib')\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "components\\ui\\label.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nfunction Label({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\r\n  return (\r\n    <LabelPrimitive.Root\r\n      data-slot=\"label\"\r\n      className={cn(\r\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Label }\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}