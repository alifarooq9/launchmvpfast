{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "action-with-loading-dropdown",
  "type": "registry:component",
  "title": "Action with Loading Dropdown",
  "description": "A dropdown menu for actions with loading state",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-dropdown-menu",
    "lucide-react",
    "@tanstack/react-query"
  ],
  "files": [
    {
      "path": "registry/default/components/dropdown-menu/action-with-loading-dropdown.tsx",
      "content": "'use client'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport {\r\n    DropdownMenu,\r\n    DropdownMenuContent,\r\n    DropdownMenuGroup,\r\n    DropdownMenuItem,\r\n    DropdownMenuLabel,\r\n    DropdownMenuSeparator,\r\n    DropdownMenuShortcut,\r\n    DropdownMenuTrigger,\r\n} from '@/components/ui/dropdown-menu'\r\nimport { useMutation } from '@tanstack/react-query'\r\nimport {\r\n    EllipsisIcon,\r\n    Loader2Icon,\r\n    LockIcon,\r\n    ScanSearchIcon,\r\n    SquarePenIcon,\r\n    Trash2Icon,\r\n} from 'lucide-react'\r\nimport React, { Dispatch, JSX, SetStateAction } from 'react'\r\n\r\ntype ActionDropdownProps = {\r\n    align?: 'start' | 'end' | 'center'\r\n    side?: 'top' | 'right' | 'bottom' | 'left'\r\n}\r\n\r\ntype ComponentProps = {\r\n    open: boolean\r\n    setOpen: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\ntype Item = {\r\n    id: string\r\n    subItems: {\r\n        id: string\r\n        icon: React.ReactNode\r\n        variant?: 'destructive' | 'default'\r\n        Component: ({ open, setOpen }: ComponentProps) => JSX.Element\r\n    }[]\r\n}\r\n\r\nconst items: Item[] = [\r\n    {\r\n        id: 'general',\r\n        subItems: [\r\n            {\r\n                id: 'edit',\r\n                icon: <SquarePenIcon />,\r\n                Component: EditItem,\r\n            },\r\n            {\r\n                id: 'view',\r\n                icon: <ScanSearchIcon />,\r\n                Component: ViewItem,\r\n            },\r\n            {\r\n                id: 'block',\r\n                icon: <LockIcon />,\r\n                Component: BlockItem,\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        id: 'destructive',\r\n        subItems: [\r\n            {\r\n                id: 'delete',\r\n                icon: <Trash2Icon />,\r\n                Component: DeleteItem,\r\n                variant: 'destructive',\r\n            },\r\n        ],\r\n    },\r\n]\r\n\r\nexport default function ActionWithLoadingDropdown({\r\n    align = 'end',\r\n    side = 'bottom',\r\n}: ActionDropdownProps) {\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    return (\r\n        <DropdownMenu open={open} onOpenChange={setOpen}>\r\n            <DropdownMenuTrigger asChild>\r\n                <Button variant=\"outline\" className=\"cursor-pointer\">\r\n                    <span>Actions with loading</span>\r\n                    <EllipsisIcon />\r\n                </Button>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent\r\n                align={align}\r\n                side={side}\r\n                className=\"w-[200px]\"\r\n            >\r\n                <DropdownMenuLabel>Actions</DropdownMenuLabel>\r\n                <DropdownMenuSeparator />\r\n                {items.map((item, index) => (\r\n                    <DropdownMenuGroup key={item.id}>\r\n                        {item.subItems.map(({ Component, id }) => (\r\n                            <Component open={open} setOpen={setOpen} key={id} />\r\n                        ))}\r\n                        {index < items.length - 1 && <DropdownMenuSeparator />}\r\n                    </DropdownMenuGroup>\r\n                ))}\r\n            </DropdownMenuContent>\r\n        </DropdownMenu>\r\n    )\r\n}\r\n\r\nfunction EditItem({ setOpen }: ComponentProps) {\r\n    const { isPending, mutate } = useMutation({\r\n        mutationFn: async () => {\r\n            return new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                    resolve('Edit')\r\n                }, 1000)\r\n            })\r\n        },\r\n        onSuccess: () => {\r\n            console.log(`Mutation successful: Edit`)\r\n        },\r\n        onError: () => {\r\n            console.log(`Mutation failed: Edit`)\r\n        },\r\n        onSettled: () => {\r\n            setOpen(false)\r\n        },\r\n    })\r\n\r\n    return (\r\n        <DropdownMenuItem\r\n            onSelect={(e) => {\r\n                e.preventDefault()\r\n                console.log('Edit clicked')\r\n                mutate()\r\n            }}\r\n            disabled={isPending}\r\n        >\r\n            {isPending ? (\r\n                <Loader2Icon className=\"animate-spin\" />\r\n            ) : (\r\n                <SquarePenIcon />\r\n            )}\r\n            <span className=\"flex-1\">Edit</span>\r\n            <DropdownMenuShortcut>E</DropdownMenuShortcut>\r\n        </DropdownMenuItem>\r\n    )\r\n}\r\n\r\nfunction ViewItem({ setOpen }: ComponentProps) {\r\n    const { isPending, mutate } = useMutation({\r\n        mutationFn: async () => {\r\n            return new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                    resolve('View')\r\n                }, 1000)\r\n            })\r\n        },\r\n        onSuccess: () => {\r\n            console.log(`Mutation successful: View`)\r\n        },\r\n        onError: () => {\r\n            console.log(`Mutation failed: View`)\r\n        },\r\n        onSettled: () => {\r\n            setOpen(false)\r\n        },\r\n    })\r\n\r\n    return (\r\n        <DropdownMenuItem\r\n            onSelect={(e) => {\r\n                e.preventDefault()\r\n                console.log('View clicked')\r\n                mutate()\r\n            }}\r\n            disabled={isPending}\r\n        >\r\n            {isPending ? (\r\n                <Loader2Icon className=\"animate-spin\" />\r\n            ) : (\r\n                <ScanSearchIcon />\r\n            )}\r\n            <span className=\"flex-1\">View</span>\r\n            <DropdownMenuShortcut>V</DropdownMenuShortcut>\r\n        </DropdownMenuItem>\r\n    )\r\n}\r\n\r\nfunction BlockItem({ setOpen }: ComponentProps) {\r\n    const { isPending, mutate } = useMutation({\r\n        mutationFn: async () => {\r\n            return new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                    resolve('Block')\r\n                }, 1000)\r\n            })\r\n        },\r\n        onSuccess: () => {\r\n            console.log(`Mutation successful: Block`)\r\n        },\r\n        onError: () => {\r\n            console.log(`Mutation failed: Block`)\r\n        },\r\n        onSettled: () => {\r\n            setOpen(false)\r\n        },\r\n    })\r\n\r\n    return (\r\n        <DropdownMenuItem\r\n            onSelect={(e) => {\r\n                e.preventDefault()\r\n                console.log('Block clicked')\r\n                mutate()\r\n            }}\r\n            disabled={isPending}\r\n        >\r\n            {isPending ? (\r\n                <Loader2Icon className=\"animate-spin\" />\r\n            ) : (\r\n                <LockIcon />\r\n            )}\r\n            <span className=\"flex-1\">Block</span>\r\n            <DropdownMenuShortcut>B</DropdownMenuShortcut>\r\n        </DropdownMenuItem>\r\n    )\r\n}\r\n\r\nfunction DeleteItem({ setOpen }: ComponentProps) {\r\n    const { isPending, mutate } = useMutation({\r\n        mutationFn: async () => {\r\n            return new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                    resolve('Delete')\r\n                }, 1000)\r\n            })\r\n        },\r\n        onSuccess: () => {\r\n            console.log(`Mutation successful: Delete`)\r\n        },\r\n        onError: () => {\r\n            console.log(`Mutation failed: Delete`)\r\n        },\r\n        onSettled: () => {\r\n            setOpen(false)\r\n        },\r\n    })\r\n\r\n    return (\r\n        <DropdownMenuItem\r\n            onSelect={(e) => {\r\n                e.preventDefault()\r\n                console.log('Delete clicked')\r\n                mutate()\r\n            }}\r\n            variant=\"destructive\"\r\n            disabled={isPending}\r\n        >\r\n            {isPending ? (\r\n                <Loader2Icon className=\"animate-spin\" />\r\n            ) : (\r\n                <Trash2Icon />\r\n            )}\r\n            <span className=\"flex-1\">Delete</span>\r\n            <DropdownMenuShortcut className=\"text-destructive\">\r\n                D\r\n            </DropdownMenuShortcut>\r\n        </DropdownMenuItem>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/action-with-loading-dropdown.tsx"
    },
    {
      "path": "registry\\default\\components\\dropdown-menu\\action-with-loading-dropdown.tsx",
      "content": "'use client'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport {\r\n    DropdownMenu,\r\n    DropdownMenuContent,\r\n    DropdownMenuGroup,\r\n    DropdownMenuItem,\r\n    DropdownMenuLabel,\r\n    DropdownMenuSeparator,\r\n    DropdownMenuShortcut,\r\n    DropdownMenuTrigger,\r\n} from '@/components/ui/dropdown-menu'\r\nimport { useMutation } from '@tanstack/react-query'\r\nimport {\r\n    EllipsisIcon,\r\n    Loader2Icon,\r\n    LockIcon,\r\n    ScanSearchIcon,\r\n    SquarePenIcon,\r\n    Trash2Icon,\r\n} from 'lucide-react'\r\nimport React, { Dispatch, JSX, SetStateAction } from 'react'\r\n\r\ntype ActionDropdownProps = {\r\n    align?: 'start' | 'end' | 'center'\r\n    side?: 'top' | 'right' | 'bottom' | 'left'\r\n}\r\n\r\ntype ComponentProps = {\r\n    open: boolean\r\n    setOpen: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\ntype Item = {\r\n    id: string\r\n    subItems: {\r\n        id: string\r\n        icon: React.ReactNode\r\n        variant?: 'destructive' | 'default'\r\n        Component: ({ open, setOpen }: ComponentProps) => JSX.Element\r\n    }[]\r\n}\r\n\r\nconst items: Item[] = [\r\n    {\r\n        id: 'general',\r\n        subItems: [\r\n            {\r\n                id: 'edit',\r\n                icon: <SquarePenIcon />,\r\n                Component: EditItem,\r\n            },\r\n            {\r\n                id: 'view',\r\n                icon: <ScanSearchIcon />,\r\n                Component: ViewItem,\r\n            },\r\n            {\r\n                id: 'block',\r\n                icon: <LockIcon />,\r\n                Component: BlockItem,\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        id: 'destructive',\r\n        subItems: [\r\n            {\r\n                id: 'delete',\r\n                icon: <Trash2Icon />,\r\n                Component: DeleteItem,\r\n                variant: 'destructive',\r\n            },\r\n        ],\r\n    },\r\n]\r\n\r\nexport default function ActionWithLoadingDropdown({\r\n    align = 'end',\r\n    side = 'bottom',\r\n}: ActionDropdownProps) {\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    return (\r\n        <DropdownMenu open={open} onOpenChange={setOpen}>\r\n            <DropdownMenuTrigger asChild>\r\n                <Button variant=\"outline\" className=\"cursor-pointer\">\r\n                    <span>Actions with loading</span>\r\n                    <EllipsisIcon />\r\n                </Button>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent\r\n                align={align}\r\n                side={side}\r\n                className=\"w-[200px]\"\r\n            >\r\n                <DropdownMenuLabel>Actions</DropdownMenuLabel>\r\n                <DropdownMenuSeparator />\r\n                {items.map((item, index) => (\r\n                    <DropdownMenuGroup key={item.id}>\r\n                        {item.subItems.map(({ Component, id }) => (\r\n                            <Component open={open} setOpen={setOpen} key={id} />\r\n                        ))}\r\n                        {index < items.length - 1 && <DropdownMenuSeparator />}\r\n                    </DropdownMenuGroup>\r\n                ))}\r\n            </DropdownMenuContent>\r\n        </DropdownMenu>\r\n    )\r\n}\r\n\r\nfunction EditItem({ setOpen }: ComponentProps) {\r\n    const { isPending, mutate } = useMutation({\r\n        mutationFn: async () => {\r\n            return new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                    resolve('Edit')\r\n                }, 1000)\r\n            })\r\n        },\r\n        onSuccess: () => {\r\n            console.log(`Mutation successful: Edit`)\r\n        },\r\n        onError: () => {\r\n            console.log(`Mutation failed: Edit`)\r\n        },\r\n        onSettled: () => {\r\n            setOpen(false)\r\n        },\r\n    })\r\n\r\n    return (\r\n        <DropdownMenuItem\r\n            onSelect={(e) => {\r\n                e.preventDefault()\r\n                console.log('Edit clicked')\r\n                mutate()\r\n            }}\r\n            disabled={isPending}\r\n        >\r\n            {isPending ? (\r\n                <Loader2Icon className=\"animate-spin\" />\r\n            ) : (\r\n                <SquarePenIcon />\r\n            )}\r\n            <span className=\"flex-1\">Edit</span>\r\n            <DropdownMenuShortcut>E</DropdownMenuShortcut>\r\n        </DropdownMenuItem>\r\n    )\r\n}\r\n\r\nfunction ViewItem({ setOpen }: ComponentProps) {\r\n    const { isPending, mutate } = useMutation({\r\n        mutationFn: async () => {\r\n            return new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                    resolve('View')\r\n                }, 1000)\r\n            })\r\n        },\r\n        onSuccess: () => {\r\n            console.log(`Mutation successful: View`)\r\n        },\r\n        onError: () => {\r\n            console.log(`Mutation failed: View`)\r\n        },\r\n        onSettled: () => {\r\n            setOpen(false)\r\n        },\r\n    })\r\n\r\n    return (\r\n        <DropdownMenuItem\r\n            onSelect={(e) => {\r\n                e.preventDefault()\r\n                console.log('View clicked')\r\n                mutate()\r\n            }}\r\n            disabled={isPending}\r\n        >\r\n            {isPending ? (\r\n                <Loader2Icon className=\"animate-spin\" />\r\n            ) : (\r\n                <ScanSearchIcon />\r\n            )}\r\n            <span className=\"flex-1\">View</span>\r\n            <DropdownMenuShortcut>V</DropdownMenuShortcut>\r\n        </DropdownMenuItem>\r\n    )\r\n}\r\n\r\nfunction BlockItem({ setOpen }: ComponentProps) {\r\n    const { isPending, mutate } = useMutation({\r\n        mutationFn: async () => {\r\n            return new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                    resolve('Block')\r\n                }, 1000)\r\n            })\r\n        },\r\n        onSuccess: () => {\r\n            console.log(`Mutation successful: Block`)\r\n        },\r\n        onError: () => {\r\n            console.log(`Mutation failed: Block`)\r\n        },\r\n        onSettled: () => {\r\n            setOpen(false)\r\n        },\r\n    })\r\n\r\n    return (\r\n        <DropdownMenuItem\r\n            onSelect={(e) => {\r\n                e.preventDefault()\r\n                console.log('Block clicked')\r\n                mutate()\r\n            }}\r\n            disabled={isPending}\r\n        >\r\n            {isPending ? (\r\n                <Loader2Icon className=\"animate-spin\" />\r\n            ) : (\r\n                <LockIcon />\r\n            )}\r\n            <span className=\"flex-1\">Block</span>\r\n            <DropdownMenuShortcut>B</DropdownMenuShortcut>\r\n        </DropdownMenuItem>\r\n    )\r\n}\r\n\r\nfunction DeleteItem({ setOpen }: ComponentProps) {\r\n    const { isPending, mutate } = useMutation({\r\n        mutationFn: async () => {\r\n            return new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                    resolve('Delete')\r\n                }, 1000)\r\n            })\r\n        },\r\n        onSuccess: () => {\r\n            console.log(`Mutation successful: Delete`)\r\n        },\r\n        onError: () => {\r\n            console.log(`Mutation failed: Delete`)\r\n        },\r\n        onSettled: () => {\r\n            setOpen(false)\r\n        },\r\n    })\r\n\r\n    return (\r\n        <DropdownMenuItem\r\n            onSelect={(e) => {\r\n                e.preventDefault()\r\n                console.log('Delete clicked')\r\n                mutate()\r\n            }}\r\n            variant=\"destructive\"\r\n            disabled={isPending}\r\n        >\r\n            {isPending ? (\r\n                <Loader2Icon className=\"animate-spin\" />\r\n            ) : (\r\n                <Trash2Icon />\r\n            )}\r\n            <span className=\"flex-1\">Delete</span>\r\n            <DropdownMenuShortcut className=\"text-destructive\">\r\n                D\r\n            </DropdownMenuShortcut>\r\n        </DropdownMenuItem>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\button.tsx",
      "content": "import * as React from 'react'\r\nimport { Slot } from '@radix-ui/react-slot'\r\nimport { cva, type VariantProps } from 'class-variance-authority'\r\n\r\nimport { cn } from '@/lib/utils'\r\n\r\nconst buttonVariants = cva(\r\n    \"inline-flex items-center relative justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive group\",\r\n    {\r\n        variants: {\r\n            variant: {\r\n                default:\r\n                    'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\r\n                destructive:\r\n                    'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\r\n                outline:\r\n                    'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\r\n                secondary:\r\n                    'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\r\n                ghost: 'hover:bg-accent hover:text-accent-foreground',\r\n                link: 'text-primary underline-offset-4 hover:underline',\r\n                defaultWithOutline:\r\n                    'bg-transparent text-primary-foreground border border-border hover:border-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50 dark:text-primary-foreground before:-z-10 before:content-[\"\"] before:absolute before:top-1/2 before:left-1/2 dark:hover:border-foreground before:-translate-x-1/2 before:-translate-y-1/2 before:w-[calc(100%-6px)] before:h-[calc(100%-6px)] before:rounded-sm before:bg-primary  before:transition-colors duration-500',\r\n                secondaryWithOutline:\r\n                    'bg-transparent text-secondary-foreground border border-border hover:border-foreground dark:bg-input/30 dark:border-input dark:hover:border-primary dark:hover:bg-input/50 dark:text-secondary-foreground before:-z-10 before:content-[\"\"] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-[calc(100%-6px)] before:h-[calc(100%-6px)] before:rounded-sm before:bg-secondary before:transition-colors duration-500',\r\n            },\r\n            size: {\r\n                default: 'h-9 px-4 py-2 has-[>svg]:px-3',\r\n                sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\r\n                lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\r\n                xl: 'h-12 rounded-md px-8 has-[>svg]:px-6',\r\n                icon: 'size-9',\r\n                iconSm: 'size-8',\r\n                iconXsm: 'size-5',\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            variant: 'default',\r\n            size: 'default',\r\n        },\r\n    }\r\n)\r\n\r\nfunction Button({\r\n    className,\r\n    variant,\r\n    size,\r\n    asChild = false,\r\n    ...props\r\n}: React.ComponentProps<'button'> &\r\n    VariantProps<typeof buttonVariants> & {\r\n        asChild?: boolean\r\n    }) {\r\n    const Comp = asChild ? Slot : 'button'\r\n\r\n    return (\r\n        <Comp\r\n            data-slot=\"button\"\r\n            className={cn(buttonVariants({ variant, size, className }))}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nexport { Button, buttonVariants }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\dropdown-menu.tsx",
      "content": "'use client'\r\n\r\nimport * as React from 'react'\r\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'\r\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\r\n\r\nimport { cn } from '@/lib/utils'\r\n\r\nfunction DropdownMenu({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\r\n    return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\r\n}\r\n\r\nfunction DropdownMenuPortal({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Portal\r\n            data-slot=\"dropdown-menu-portal\"\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuTrigger({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Trigger\r\n            data-slot=\"dropdown-menu-trigger\"\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuContent({\r\n    className,\r\n    sideOffset = 4,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Portal>\r\n            <DropdownMenuPrimitive.Content\r\n                data-slot=\"dropdown-menu-content\"\r\n                sideOffset={sideOffset}\r\n                className={cn(\r\n                    'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\r\n                    className\r\n                )}\r\n                {...props}\r\n            />\r\n        </DropdownMenuPrimitive.Portal>\r\n    )\r\n}\r\n\r\nfunction DropdownMenuGroup({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Group\r\n            data-slot=\"dropdown-menu-group\"\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuItem({\r\n    className,\r\n    inset,\r\n    variant = 'default',\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\r\n    inset?: boolean\r\n    variant?: 'default' | 'destructive'\r\n}) {\r\n    return (\r\n        <DropdownMenuPrimitive.Item\r\n            data-slot=\"dropdown-menu-item\"\r\n            data-inset={inset}\r\n            data-variant={variant}\r\n            className={cn(\r\n                \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden transition-all select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuCheckboxItem({\r\n    className,\r\n    children,\r\n    checked,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\r\n    return (\r\n        <DropdownMenuPrimitive.CheckboxItem\r\n            data-slot=\"dropdown-menu-checkbox-item\"\r\n            className={cn(\r\n                \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n                className\r\n            )}\r\n            checked={checked}\r\n            {...props}\r\n        >\r\n            <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\r\n                <DropdownMenuPrimitive.ItemIndicator>\r\n                    <CheckIcon className=\"size-4\" />\r\n                </DropdownMenuPrimitive.ItemIndicator>\r\n            </span>\r\n            {children}\r\n        </DropdownMenuPrimitive.CheckboxItem>\r\n    )\r\n}\r\n\r\nfunction DropdownMenuRadioGroup({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\r\n    return (\r\n        <DropdownMenuPrimitive.RadioGroup\r\n            data-slot=\"dropdown-menu-radio-group\"\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuRadioItem({\r\n    className,\r\n    children,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\r\n    return (\r\n        <DropdownMenuPrimitive.RadioItem\r\n            data-slot=\"dropdown-menu-radio-item\"\r\n            className={cn(\r\n                \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\r\n                <DropdownMenuPrimitive.ItemIndicator>\r\n                    <CircleIcon className=\"size-2 fill-current\" />\r\n                </DropdownMenuPrimitive.ItemIndicator>\r\n            </span>\r\n            {children}\r\n        </DropdownMenuPrimitive.RadioItem>\r\n    )\r\n}\r\n\r\nfunction DropdownMenuLabel({\r\n    className,\r\n    inset,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\r\n    inset?: boolean\r\n}) {\r\n    return (\r\n        <DropdownMenuPrimitive.Label\r\n            data-slot=\"dropdown-menu-label\"\r\n            data-inset={inset}\r\n            className={cn(\r\n                'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuSeparator({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Separator\r\n            data-slot=\"dropdown-menu-separator\"\r\n            className={cn('bg-border -mx-1 my-1 h-px', className)}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuShortcut({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<'span'>) {\r\n    return (\r\n        <span\r\n            data-slot=\"dropdown-menu-shortcut\"\r\n            className={cn(\r\n                'text-muted-foreground border-border ml-auto flex aspect-square h-5 w-5 items-center justify-center rounded-sm border text-xs leading-none font-medium tracking-widest',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuSub({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuSubTrigger({\r\n    className,\r\n    inset,\r\n    children,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\r\n    inset?: boolean\r\n}) {\r\n    return (\r\n        <DropdownMenuPrimitive.SubTrigger\r\n            data-slot=\"dropdown-menu-sub-trigger\"\r\n            data-inset={inset}\r\n            className={cn(\r\n                'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            {children}\r\n            <ChevronRightIcon className=\"ml-auto size-4\" />\r\n        </DropdownMenuPrimitive.SubTrigger>\r\n    )\r\n}\r\n\r\nfunction DropdownMenuSubContent({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\r\n    return (\r\n        <DropdownMenuPrimitive.SubContent\r\n            data-slot=\"dropdown-menu-sub-content\"\r\n            className={cn(\r\n                'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nexport {\r\n    DropdownMenu,\r\n    DropdownMenuPortal,\r\n    DropdownMenuTrigger,\r\n    DropdownMenuContent,\r\n    DropdownMenuGroup,\r\n    DropdownMenuLabel,\r\n    DropdownMenuItem,\r\n    DropdownMenuCheckboxItem,\r\n    DropdownMenuRadioGroup,\r\n    DropdownMenuRadioItem,\r\n    DropdownMenuSeparator,\r\n    DropdownMenuShortcut,\r\n    DropdownMenuSub,\r\n    DropdownMenuSubTrigger,\r\n    DropdownMenuSubContent,\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx'\r\nimport { twMerge } from 'tailwind-merge'\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n    return twMerge(clsx(inputs))\r\n}\r\n\r\nexport const convertRegistryPaths = (content: string): string => {\r\n    return content\r\n        .replace(/@\\/registry\\/default\\/ui/g, '@/components/ui')\r\n        .replace(/@\\/registry\\/default\\/hooks/g, '@/hooks')\r\n        .replace(/@\\/registry\\/default\\/lib/g, '@/lib')\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}