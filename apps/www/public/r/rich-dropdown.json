{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "rich-dropdown",
  "type": "registry:component",
  "title": "Rich Dropdown",
  "description": "A dropdown menu with rich content",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-dropdown-menu",
    "lucide-react",
    "@radix-ui/react-label",
    "@radix-ui/react-select",
    "@radix-ui/react-switch",
    "next-themes"
  ],
  "files": [
    {
      "path": "registry/default/components/dropdown-menu/rich-dropdown.tsx",
      "content": "'use client'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport {\r\n    DropdownMenu,\r\n    DropdownMenuContent,\r\n    DropdownMenuItem,\r\n    DropdownMenuSeparator,\r\n    DropdownMenuTrigger,\r\n} from '@/components/ui/dropdown-menu'\r\nimport { DropdownMenuItem as RadixDropdownMenuItem } from '@radix-ui/react-dropdown-menu'\r\nimport { Label } from '@/components/ui/label'\r\nimport {\r\n    ArrowDownAZIcon,\r\n    ArrowUpAZIcon,\r\n    ChevronDownIcon,\r\n    XIcon,\r\n} from 'lucide-react'\r\nimport {\r\n    Select,\r\n    SelectContent,\r\n    SelectItem,\r\n    SelectTrigger,\r\n    SelectValue,\r\n} from '@/components/ui/select'\r\nimport { Switch } from '@/components/ui/switch'\r\nimport React from 'react'\r\nimport { useTheme } from 'next-themes'\r\n\r\ntype Item = {\r\n    label: string\r\n    ItemComponent: React.ReactNode\r\n}\r\n\r\nconst items: Item[] = [\r\n    {\r\n        label: 'Filter',\r\n        ItemComponent: <FilterItem />,\r\n    },\r\n    {\r\n        label: 'Title',\r\n        ItemComponent: <TitleComponent />,\r\n    },\r\n    { label: 'Custom Config', ItemComponent: <CustomConfigComponent /> },\r\n    { label: 'Dark Mode', ItemComponent: <DarkModeComponent /> },\r\n]\r\n\r\nexport default function RichDropdown() {\r\n    return (\r\n        <DropdownMenu>\r\n            <DropdownMenuTrigger asChild>\r\n                <Button variant=\"outline\" className=\"cursor-pointer\">\r\n                    Rich Dropdown <ChevronDownIcon />\r\n                </Button>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent className=\"w-[100svw] max-w-[250px]\">\r\n                {items.map((item) => (\r\n                    <div\r\n                        key={item.label}\r\n                        className=\"focus-within:bg-accent focus-within:text-accent-foreground grid min-h-9 grid-cols-2 place-content-center gap-2 rounded-md px-2 py-1.5 transition-all\"\r\n                    >\r\n                        <Label className=\"pl-2\">{item.label}</Label>\r\n\r\n                        {item.ItemComponent}\r\n                    </div>\r\n                ))}\r\n\r\n                <DropdownMenuSeparator />\r\n                <DropdownMenuItem className=\"flex justify-center pl-0\">\r\n                    Clear all\r\n                </DropdownMenuItem>\r\n            </DropdownMenuContent>\r\n        </DropdownMenu>\r\n    )\r\n}\r\n\r\nfunction FilterItem() {\r\n    return (\r\n        <Select defaultValue=\"asc\">\r\n            <div className=\"flex justify-center\">\r\n                <DropdownMenuItem asChild onSelect={(e) => e.preventDefault()}>\r\n                    <SelectTrigger className=\"w-fit\" size=\"sm\">\r\n                        <SelectValue placeholder=\"Filter\" />\r\n                    </SelectTrigger>\r\n                </DropdownMenuItem>\r\n            </div>\r\n\r\n            <SelectContent align=\"end\">\r\n                <SelectItem value=\"asc\">\r\n                    <ArrowDownAZIcon /> Asc\r\n                </SelectItem>\r\n                <SelectItem value=\"desc\">\r\n                    <ArrowUpAZIcon /> Desc\r\n                </SelectItem>\r\n                <SelectItem value=\"none\">\r\n                    <XIcon /> None\r\n                </SelectItem>\r\n            </SelectContent>\r\n        </Select>\r\n    )\r\n}\r\n\r\nfunction TitleComponent() {\r\n    return (\r\n        <div className=\"flex items-center justify-center\">\r\n            <RadixDropdownMenuItem asChild onSelect={(e) => e.preventDefault()}>\r\n                <Switch />\r\n            </RadixDropdownMenuItem>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction CustomConfigComponent() {\r\n    return (\r\n        <div className=\"flex items-center justify-center\">\r\n            <RadixDropdownMenuItem asChild onSelect={(e) => e.preventDefault()}>\r\n                <Switch />\r\n            </RadixDropdownMenuItem>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction DarkModeComponent() {\r\n    const { resolvedTheme, setTheme } = useTheme()\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-center\">\r\n            <RadixDropdownMenuItem asChild onSelect={(e) => e.preventDefault()}>\r\n                <Switch\r\n                    checked={resolvedTheme === 'dark'}\r\n                    onCheckedChange={(checked) =>\r\n                        setTheme(checked ? 'dark' : 'light')\r\n                    }\r\n                />\r\n            </RadixDropdownMenuItem>\r\n        </div>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/rich-dropdown.tsx"
    },
    {
      "path": "registry\\default\\components\\dropdown-menu\\rich-dropdown.tsx",
      "content": "'use client'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport {\r\n    DropdownMenu,\r\n    DropdownMenuContent,\r\n    DropdownMenuItem,\r\n    DropdownMenuSeparator,\r\n    DropdownMenuTrigger,\r\n} from '@/components/ui/dropdown-menu'\r\nimport { DropdownMenuItem as RadixDropdownMenuItem } from '@radix-ui/react-dropdown-menu'\r\nimport { Label } from '@/components/ui/label'\r\nimport {\r\n    ArrowDownAZIcon,\r\n    ArrowUpAZIcon,\r\n    ChevronDownIcon,\r\n    XIcon,\r\n} from 'lucide-react'\r\nimport {\r\n    Select,\r\n    SelectContent,\r\n    SelectItem,\r\n    SelectTrigger,\r\n    SelectValue,\r\n} from '@/components/ui/select'\r\nimport { Switch } from '@/components/ui/switch'\r\nimport React from 'react'\r\nimport { useTheme } from 'next-themes'\r\n\r\ntype Item = {\r\n    label: string\r\n    ItemComponent: React.ReactNode\r\n}\r\n\r\nconst items: Item[] = [\r\n    {\r\n        label: 'Filter',\r\n        ItemComponent: <FilterItem />,\r\n    },\r\n    {\r\n        label: 'Title',\r\n        ItemComponent: <TitleComponent />,\r\n    },\r\n    { label: 'Custom Config', ItemComponent: <CustomConfigComponent /> },\r\n    { label: 'Dark Mode', ItemComponent: <DarkModeComponent /> },\r\n]\r\n\r\nexport default function RichDropdown() {\r\n    return (\r\n        <DropdownMenu>\r\n            <DropdownMenuTrigger asChild>\r\n                <Button variant=\"outline\" className=\"cursor-pointer\">\r\n                    Rich Dropdown <ChevronDownIcon />\r\n                </Button>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent className=\"w-[100svw] max-w-[250px]\">\r\n                {items.map((item) => (\r\n                    <div\r\n                        key={item.label}\r\n                        className=\"focus-within:bg-accent focus-within:text-accent-foreground grid min-h-9 grid-cols-2 place-content-center gap-2 rounded-md px-2 py-1.5 transition-all\"\r\n                    >\r\n                        <Label className=\"pl-2\">{item.label}</Label>\r\n\r\n                        {item.ItemComponent}\r\n                    </div>\r\n                ))}\r\n\r\n                <DropdownMenuSeparator />\r\n                <DropdownMenuItem className=\"flex justify-center pl-0\">\r\n                    Clear all\r\n                </DropdownMenuItem>\r\n            </DropdownMenuContent>\r\n        </DropdownMenu>\r\n    )\r\n}\r\n\r\nfunction FilterItem() {\r\n    return (\r\n        <Select defaultValue=\"asc\">\r\n            <div className=\"flex justify-center\">\r\n                <DropdownMenuItem asChild onSelect={(e) => e.preventDefault()}>\r\n                    <SelectTrigger className=\"w-fit\" size=\"sm\">\r\n                        <SelectValue placeholder=\"Filter\" />\r\n                    </SelectTrigger>\r\n                </DropdownMenuItem>\r\n            </div>\r\n\r\n            <SelectContent align=\"end\">\r\n                <SelectItem value=\"asc\">\r\n                    <ArrowDownAZIcon /> Asc\r\n                </SelectItem>\r\n                <SelectItem value=\"desc\">\r\n                    <ArrowUpAZIcon /> Desc\r\n                </SelectItem>\r\n                <SelectItem value=\"none\">\r\n                    <XIcon /> None\r\n                </SelectItem>\r\n            </SelectContent>\r\n        </Select>\r\n    )\r\n}\r\n\r\nfunction TitleComponent() {\r\n    return (\r\n        <div className=\"flex items-center justify-center\">\r\n            <RadixDropdownMenuItem asChild onSelect={(e) => e.preventDefault()}>\r\n                <Switch />\r\n            </RadixDropdownMenuItem>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction CustomConfigComponent() {\r\n    return (\r\n        <div className=\"flex items-center justify-center\">\r\n            <RadixDropdownMenuItem asChild onSelect={(e) => e.preventDefault()}>\r\n                <Switch />\r\n            </RadixDropdownMenuItem>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction DarkModeComponent() {\r\n    const { resolvedTheme, setTheme } = useTheme()\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-center\">\r\n            <RadixDropdownMenuItem asChild onSelect={(e) => e.preventDefault()}>\r\n                <Switch\r\n                    checked={resolvedTheme === 'dark'}\r\n                    onCheckedChange={(checked) =>\r\n                        setTheme(checked ? 'dark' : 'light')\r\n                    }\r\n                />\r\n            </RadixDropdownMenuItem>\r\n        </div>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\button.tsx",
      "content": "import * as React from 'react'\r\nimport { Slot } from '@radix-ui/react-slot'\r\nimport { cva, type VariantProps } from 'class-variance-authority'\r\n\r\nimport { cn } from '@/lib/utils'\r\n\r\nconst buttonVariants = cva(\r\n    \"inline-flex items-center relative justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive group\",\r\n    {\r\n        variants: {\r\n            variant: {\r\n                default:\r\n                    'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\r\n                destructive:\r\n                    'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\r\n                outline:\r\n                    'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\r\n                secondary:\r\n                    'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\r\n                ghost: 'hover:bg-accent hover:text-accent-foreground',\r\n                link: 'text-primary underline-offset-4 hover:underline',\r\n                defaultWithOutline:\r\n                    'bg-transparent text-primary-foreground border border-border hover:border-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50 dark:text-primary-foreground before:-z-10 before:content-[\"\"] before:absolute before:top-1/2 before:left-1/2 dark:hover:border-foreground before:-translate-x-1/2 before:-translate-y-1/2 before:w-[calc(100%-6px)] before:h-[calc(100%-6px)] before:rounded-sm before:bg-primary  before:transition-colors duration-500',\r\n                secondaryWithOutline:\r\n                    'bg-transparent text-secondary-foreground border border-border hover:border-foreground dark:bg-input/30 dark:border-input dark:hover:border-primary dark:hover:bg-input/50 dark:text-secondary-foreground before:-z-10 before:content-[\"\"] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-[calc(100%-6px)] before:h-[calc(100%-6px)] before:rounded-sm before:bg-secondary before:transition-colors duration-500',\r\n            },\r\n            size: {\r\n                default: 'h-9 px-4 py-2 has-[>svg]:px-3',\r\n                sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\r\n                lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\r\n                xl: 'h-12 rounded-md px-8 has-[>svg]:px-6',\r\n                icon: 'size-9',\r\n                iconSm: 'size-8',\r\n                iconXsm: 'size-5',\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            variant: 'default',\r\n            size: 'default',\r\n        },\r\n    }\r\n)\r\n\r\nfunction Button({\r\n    className,\r\n    variant,\r\n    size,\r\n    asChild = false,\r\n    ...props\r\n}: React.ComponentProps<'button'> &\r\n    VariantProps<typeof buttonVariants> & {\r\n        asChild?: boolean\r\n    }) {\r\n    const Comp = asChild ? Slot : 'button'\r\n\r\n    return (\r\n        <Comp\r\n            data-slot=\"button\"\r\n            className={cn(buttonVariants({ variant, size, className }))}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nexport { Button, buttonVariants }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\dropdown-menu.tsx",
      "content": "'use client'\r\n\r\nimport * as React from 'react'\r\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'\r\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\r\n\r\nimport { cn } from '@/lib/utils'\r\n\r\nfunction DropdownMenu({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\r\n    return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\r\n}\r\n\r\nfunction DropdownMenuPortal({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Portal\r\n            data-slot=\"dropdown-menu-portal\"\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuTrigger({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Trigger\r\n            data-slot=\"dropdown-menu-trigger\"\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuContent({\r\n    className,\r\n    sideOffset = 4,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Portal>\r\n            <DropdownMenuPrimitive.Content\r\n                data-slot=\"dropdown-menu-content\"\r\n                sideOffset={sideOffset}\r\n                className={cn(\r\n                    'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\r\n                    className\r\n                )}\r\n                {...props}\r\n            />\r\n        </DropdownMenuPrimitive.Portal>\r\n    )\r\n}\r\n\r\nfunction DropdownMenuGroup({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Group\r\n            data-slot=\"dropdown-menu-group\"\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuItem({\r\n    className,\r\n    inset,\r\n    variant = 'default',\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\r\n    inset?: boolean\r\n    variant?: 'default' | 'destructive'\r\n}) {\r\n    return (\r\n        <DropdownMenuPrimitive.Item\r\n            data-slot=\"dropdown-menu-item\"\r\n            data-inset={inset}\r\n            data-variant={variant}\r\n            className={cn(\r\n                \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden transition-all select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuCheckboxItem({\r\n    className,\r\n    children,\r\n    checked,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\r\n    return (\r\n        <DropdownMenuPrimitive.CheckboxItem\r\n            data-slot=\"dropdown-menu-checkbox-item\"\r\n            className={cn(\r\n                \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n                className\r\n            )}\r\n            checked={checked}\r\n            {...props}\r\n        >\r\n            <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\r\n                <DropdownMenuPrimitive.ItemIndicator>\r\n                    <CheckIcon className=\"size-4\" />\r\n                </DropdownMenuPrimitive.ItemIndicator>\r\n            </span>\r\n            {children}\r\n        </DropdownMenuPrimitive.CheckboxItem>\r\n    )\r\n}\r\n\r\nfunction DropdownMenuRadioGroup({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\r\n    return (\r\n        <DropdownMenuPrimitive.RadioGroup\r\n            data-slot=\"dropdown-menu-radio-group\"\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuRadioItem({\r\n    className,\r\n    children,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\r\n    return (\r\n        <DropdownMenuPrimitive.RadioItem\r\n            data-slot=\"dropdown-menu-radio-item\"\r\n            className={cn(\r\n                \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\r\n                <DropdownMenuPrimitive.ItemIndicator>\r\n                    <CircleIcon className=\"size-2 fill-current\" />\r\n                </DropdownMenuPrimitive.ItemIndicator>\r\n            </span>\r\n            {children}\r\n        </DropdownMenuPrimitive.RadioItem>\r\n    )\r\n}\r\n\r\nfunction DropdownMenuLabel({\r\n    className,\r\n    inset,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\r\n    inset?: boolean\r\n}) {\r\n    return (\r\n        <DropdownMenuPrimitive.Label\r\n            data-slot=\"dropdown-menu-label\"\r\n            data-inset={inset}\r\n            className={cn(\r\n                'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuSeparator({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Separator\r\n            data-slot=\"dropdown-menu-separator\"\r\n            className={cn('bg-border -mx-1 my-1 h-px', className)}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuShortcut({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<'span'>) {\r\n    return (\r\n        <span\r\n            data-slot=\"dropdown-menu-shortcut\"\r\n            className={cn(\r\n                'text-muted-foreground border-border ml-auto flex aspect-square h-5 w-5 items-center justify-center rounded-sm border text-xs leading-none font-medium tracking-widest',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuSub({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuSubTrigger({\r\n    className,\r\n    inset,\r\n    children,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\r\n    inset?: boolean\r\n}) {\r\n    return (\r\n        <DropdownMenuPrimitive.SubTrigger\r\n            data-slot=\"dropdown-menu-sub-trigger\"\r\n            data-inset={inset}\r\n            className={cn(\r\n                'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            {children}\r\n            <ChevronRightIcon className=\"ml-auto size-4\" />\r\n        </DropdownMenuPrimitive.SubTrigger>\r\n    )\r\n}\r\n\r\nfunction DropdownMenuSubContent({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\r\n    return (\r\n        <DropdownMenuPrimitive.SubContent\r\n            data-slot=\"dropdown-menu-sub-content\"\r\n            className={cn(\r\n                'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nexport {\r\n    DropdownMenu,\r\n    DropdownMenuPortal,\r\n    DropdownMenuTrigger,\r\n    DropdownMenuContent,\r\n    DropdownMenuGroup,\r\n    DropdownMenuLabel,\r\n    DropdownMenuItem,\r\n    DropdownMenuCheckboxItem,\r\n    DropdownMenuRadioGroup,\r\n    DropdownMenuRadioItem,\r\n    DropdownMenuSeparator,\r\n    DropdownMenuShortcut,\r\n    DropdownMenuSub,\r\n    DropdownMenuSubTrigger,\r\n    DropdownMenuSubContent,\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\label.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nfunction Label({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\r\n  return (\r\n    <LabelPrimitive.Root\r\n      data-slot=\"label\"\r\n      className={cn(\r\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Label }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\select.tsx",
      "content": "'use client'\r\n\r\nimport * as React from 'react'\r\nimport * as SelectPrimitive from '@radix-ui/react-select'\r\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from 'lucide-react'\r\n\r\nimport { cn } from '@/lib/utils'\r\n\r\nfunction Select({\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\r\n    return <SelectPrimitive.Root data-slot=\"select\" {...props} />\r\n}\r\n\r\nfunction SelectGroup({\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\r\n    return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\r\n}\r\n\r\nfunction SelectValue({\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\r\n    return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\r\n}\r\n\r\nfunction SelectTrigger({\r\n    className,\r\n    size = 'default',\r\n    children,\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\r\n    size?: 'sm' | 'default'\r\n}) {\r\n    return (\r\n        <SelectPrimitive.Trigger\r\n            data-slot=\"select-trigger\"\r\n            data-size={size}\r\n            className={cn(\r\n                \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            {children}\r\n            <SelectPrimitive.Icon asChild>\r\n                <ChevronDownIcon className=\"size-4 opacity-50\" />\r\n            </SelectPrimitive.Icon>\r\n        </SelectPrimitive.Trigger>\r\n    )\r\n}\r\n\r\nfunction SelectContent({\r\n    className,\r\n    children,\r\n    position = 'popper',\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\r\n    return (\r\n        <SelectPrimitive.Portal>\r\n            <SelectPrimitive.Content\r\n                data-slot=\"select-content\"\r\n                className={cn(\r\n                    'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md',\r\n                    position === 'popper' &&\r\n                        'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\r\n                    className\r\n                )}\r\n                position={position}\r\n                {...props}\r\n            >\r\n                <SelectScrollUpButton />\r\n                <SelectPrimitive.Viewport\r\n                    className={cn(\r\n                        'p-1',\r\n                        position === 'popper' &&\r\n                            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1'\r\n                    )}\r\n                >\r\n                    {children}\r\n                </SelectPrimitive.Viewport>\r\n                <SelectScrollDownButton />\r\n            </SelectPrimitive.Content>\r\n        </SelectPrimitive.Portal>\r\n    )\r\n}\r\n\r\nfunction SelectLabel({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\r\n    return (\r\n        <SelectPrimitive.Label\r\n            data-slot=\"select-label\"\r\n            className={cn(\r\n                'text-muted-foreground px-2 py-1.5 text-xs',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction SelectItem({\r\n    className,\r\n    children,\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\r\n    return (\r\n        <SelectPrimitive.Item\r\n            data-slot=\"select-item\"\r\n            className={cn(\r\n                \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\r\n                <SelectPrimitive.ItemIndicator>\r\n                    <CheckIcon className=\"size-4\" />\r\n                </SelectPrimitive.ItemIndicator>\r\n            </span>\r\n            <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\r\n        </SelectPrimitive.Item>\r\n    )\r\n}\r\n\r\nfunction SelectSeparator({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\r\n    return (\r\n        <SelectPrimitive.Separator\r\n            data-slot=\"select-separator\"\r\n            className={cn(\r\n                'bg-border pointer-events-none -mx-1 my-1 h-px',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction SelectScrollUpButton({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\r\n    return (\r\n        <SelectPrimitive.ScrollUpButton\r\n            data-slot=\"select-scroll-up-button\"\r\n            className={cn(\r\n                'flex cursor-default items-center justify-center py-1',\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            <ChevronUpIcon className=\"size-4\" />\r\n        </SelectPrimitive.ScrollUpButton>\r\n    )\r\n}\r\n\r\nfunction SelectScrollDownButton({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\r\n    return (\r\n        <SelectPrimitive.ScrollDownButton\r\n            data-slot=\"select-scroll-down-button\"\r\n            className={cn(\r\n                'flex cursor-default items-center justify-center py-1',\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            <ChevronDownIcon className=\"size-4\" />\r\n        </SelectPrimitive.ScrollDownButton>\r\n    )\r\n}\r\n\r\nexport {\r\n    Select,\r\n    SelectContent,\r\n    SelectGroup,\r\n    SelectItem,\r\n    SelectLabel,\r\n    SelectScrollDownButton,\r\n    SelectScrollUpButton,\r\n    SelectSeparator,\r\n    SelectTrigger,\r\n    SelectValue,\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\switch.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as SwitchPrimitive from \"@radix-ui/react-switch\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nfunction Switch({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\r\n  return (\r\n    <SwitchPrimitive.Root\r\n      data-slot=\"switch\"\r\n      className={cn(\r\n        \"peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      <SwitchPrimitive.Thumb\r\n        data-slot=\"switch-thumb\"\r\n        className={cn(\r\n          \"bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0\"\r\n        )}\r\n      />\r\n    </SwitchPrimitive.Root>\r\n  )\r\n}\r\n\r\nexport { Switch }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx'\r\nimport { twMerge } from 'tailwind-merge'\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n    return twMerge(clsx(inputs))\r\n}\r\n\r\nexport const convertRegistryPaths = (content: string): string => {\r\n    return content\r\n        .replace(/@\\/registry\\/default\\/ui/g, '@/components/ui')\r\n        .replace(/@\\/registry\\/default\\/hooks/g, '@/hooks')\r\n        .replace(/@\\/registry\\/default\\/lib/g, '@/lib')\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}