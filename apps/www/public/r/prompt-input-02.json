{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "prompt-input-02",
  "type": "registry:component",
  "title": "Prompt Input 02",
  "description": "A second component for inputting ai prompts",
  "dependencies": [
    "react-textarea-autosize",
    "lucide-react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-tooltip",
    "@radix-ui/react-toggle",
    "@radix-ui/react-select"
  ],
  "files": [
    {
      "path": "registry/default/components/input/prompt-input-02.tsx",
      "content": "'use client'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport { cn } from '@/lib/utils'\r\nimport {\r\n    CloudUploadIcon,\r\n    CornerLeftUpIcon,\r\n    GlobeIcon,\r\n    LightbulbIcon,\r\n    PaperclipIcon,\r\n} from 'lucide-react'\r\nimport {\r\n    DropdownMenu,\r\n    DropdownMenuContent,\r\n    DropdownMenuItem,\r\n    DropdownMenuSeparator,\r\n    DropdownMenuTrigger,\r\n} from '@/components/ui/dropdown-menu'\r\nimport {\r\n    Tooltip,\r\n    TooltipContent,\r\n    TooltipProvider,\r\n    TooltipTrigger,\r\n} from '@/components/ui/tooltip'\r\nimport React from 'react'\r\nimport TextareaAutosize from 'react-textarea-autosize'\r\nimport { Toggle } from '@/components/ui/toggle'\r\nimport {\r\n    Select,\r\n    SelectContent,\r\n    SelectGroup,\r\n    SelectItem,\r\n    SelectTrigger,\r\n    SelectValue,\r\n} from '@/components/ui/select'\r\n\r\nconst models = [\r\n    'GPT-4.5',\r\n    'Claude 3.7 Sonnet',\r\n    'Gemini 2.0 Pro',\r\n    'LLaMA 4',\r\n    'DeepSeek-R1',\r\n    'Qwen 3',\r\n    'Grok 3',\r\n    'Mistral Large 2',\r\n    'Gemma 3',\r\n    'Mixtral 8x22B',\r\n]\r\n\r\ntype PromptInput02Props = {\r\n    quickPrompts?: { label: string; value: string }[]\r\n}\r\n\r\nexport default function PromptInput02({ quickPrompts }: PromptInput02Props) {\r\n    const [message, setMessage] = React.useState<string>('')\r\n    const [searchToggle, setSearchToggle] = React.useState<boolean>(false)\r\n    const [reasonToggle, setReasonToggle] = React.useState<boolean>(false)\r\n    const [model, setModel] = React.useState<string>(models[0])\r\n\r\n    const handleSubmit = () => {\r\n        if (message.trim() === '') return\r\n        // Handle message submission logic here\r\n        console.log('Message submitted:', message)\r\n        console.log(\r\n            'Search toggle state:',\r\n            searchToggle ? 'Enabled' : 'Disabled'\r\n        )\r\n        console.log(\r\n            'Reason toggle state:',\r\n            reasonToggle ? 'Enabled' : 'Disabled'\r\n        )\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className={cn(\r\n                    'placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input rounded-xl border bg-transparent text-base shadow-xs transition-[color,box-shadow] outline-none md:text-sm',\r\n                    'focus-within:border-ring focus-within:ring-ring/50 focus-within:ring-[3px]',\r\n                    'has-aria-invalid:ring-destructive/20 dark:has-aria-invalid:ring-destructive/40 has-aria-invalid:border-destructive group',\r\n                    'flex w-full flex-col'\r\n                )}\r\n            >\r\n                <div className=\"flex items-center justify-center gap-2 p-4\">\r\n                    <TextareaAutosize\r\n                        className=\"w-full resize-none border-none bg-transparent text-base focus-visible:outline-none\"\r\n                        placeholder=\"Ask anything...\"\r\n                        minRows={1}\r\n                        rows={1}\r\n                        maxRows={6}\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                    />\r\n\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"ghost\"\r\n                        className=\"cursor-pointer\"\r\n                        disabled={!message || message.length === 0}\r\n                        onClick={() => handleSubmit()}\r\n                    >\r\n                        Send to AI\r\n                        <CornerLeftUpIcon />\r\n                    </Button>\r\n                </div>\r\n\r\n                <div className=\"border-border flex items-center justify-between border-t p-3 px-4\">\r\n                    <TooltipProvider delayDuration={0}>\r\n                        <div className=\"flex items-center gap-2\">\r\n                            <Attachments />\r\n\r\n                            <Tooltip>\r\n                                <Toggle\r\n                                    value=\"search\"\r\n                                    asChild\r\n                                    pressed={searchToggle}\r\n                                    onPressedChange={setSearchToggle}\r\n                                    className=\"cursor-pointer\"\r\n                                >\r\n                                    <TooltipTrigger>\r\n                                        <GlobeIcon />\r\n                                        <span className=\"hidden sm:block\">\r\n                                            Search\r\n                                        </span>\r\n                                    </TooltipTrigger>\r\n                                </Toggle>\r\n                                <TooltipContent>\r\n                                    <p>Search the web</p>\r\n                                </TooltipContent>\r\n                            </Tooltip>\r\n\r\n                            <Tooltip>\r\n                                <Toggle\r\n                                    value=\"reason\"\r\n                                    asChild\r\n                                    pressed={reasonToggle}\r\n                                    onPressedChange={setReasonToggle}\r\n                                    className=\"cursor-pointer\"\r\n                                >\r\n                                    <TooltipTrigger>\r\n                                        <LightbulbIcon />\r\n                                        <span className=\"hidden sm:block\">\r\n                                            Reason\r\n                                        </span>\r\n                                    </TooltipTrigger>\r\n                                </Toggle>\r\n                                <TooltipContent>\r\n                                    <p>Think before responding</p>\r\n                                </TooltipContent>\r\n                            </Tooltip>\r\n                        </div>\r\n                    </TooltipProvider>\r\n\r\n                    <Select value={model} onValueChange={setModel}>\r\n                        <SelectTrigger className=\"max-w-[120px] sm:max-w-max\">\r\n                            <SelectValue placeholder=\"Select modal\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent align=\"end\" side=\"top\">\r\n                            <SelectGroup>\r\n                                {models.map((model) => (\r\n                                    <SelectItem\r\n                                        key={model}\r\n                                        value={model}\r\n                                        onClick={() => setModel(model)}\r\n                                    >\r\n                                        {model}\r\n                                    </SelectItem>\r\n                                ))}\r\n                            </SelectGroup>\r\n                        </SelectContent>\r\n                    </Select>\r\n                </div>\r\n            </div>\r\n            {quickPrompts && quickPrompts.length > 0 && (\r\n                <div className=\"w-full\">\r\n                    <div className=\"mt-4 flex flex-wrap items-center gap-2\">\r\n                        {quickPrompts.map((prompt) => (\r\n                            <Button\r\n                                key={prompt.value}\r\n                                variant=\"outline\"\r\n                                size=\"sm\"\r\n                                onClick={() => setMessage(prompt.value)}\r\n                                className=\"cursor-pointer\"\r\n                            >\r\n                                {prompt.label}\r\n                            </Button>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nfunction Attachments() {\r\n    return (\r\n        <DropdownMenu>\r\n            <Tooltip>\r\n                <TooltipTrigger asChild>\r\n                    <DropdownMenuTrigger asChild>\r\n                        <Button\r\n                            type=\"button\"\r\n                            variant=\"ghost\"\r\n                            className=\"cursor-pointer\"\r\n                        >\r\n                            <PaperclipIcon />\r\n                            <span className=\"hidden sm:block\">Attachments</span>\r\n                        </Button>\r\n                    </DropdownMenuTrigger>\r\n                </TooltipTrigger>\r\n\r\n                <TooltipContent>\r\n                    <p>Add photos and files</p>\r\n                </TooltipContent>\r\n            </Tooltip>\r\n\r\n            <DropdownMenuContent align=\"start\" side=\"top\">\r\n                <DropdownMenuItem className=\"cursor-pointer\">\r\n                    <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        viewBox=\"0 0 87.3 78\"\r\n                    >\r\n                        <path\r\n                            fill=\"#0066da\"\r\n                            d=\"m6.6 66.85 3.85 6.65c.8 1.4 1.95 2.5 3.3 3.3L27.5 53H0c0 1.55.4 3.1 1.2 4.5z\"\r\n                        />\r\n                        <path\r\n                            fill=\"#00ac47\"\r\n                            d=\"M43.65 25 29.9 1.2c-1.35.8-2.5 1.9-3.3 3.3l-25.4 44A9.06 9.06 0 0 0 0 53h27.5z\"\r\n                        />\r\n                        <path\r\n                            fill=\"#ea4335\"\r\n                            d=\"M73.55 76.8c1.35-.8 2.5-1.9 3.3-3.3l1.6-2.75L86.1 57.5c.8-1.4 1.2-2.95 1.2-4.5H59.798l5.852 11.5z\"\r\n                        />\r\n                        <path\r\n                            fill=\"#00832d\"\r\n                            d=\"M43.65 25 57.4 1.2C56.05.4 54.5 0 52.9 0H34.4c-1.6 0-3.15.45-4.5 1.2z\"\r\n                        />\r\n                        <path\r\n                            fill=\"#2684fc\"\r\n                            d=\"M59.8 53H27.5L13.75 76.8c1.35.8 2.9 1.2 4.5 1.2h50.8c1.6 0 3.15-.45 4.5-1.2z\"\r\n                        />\r\n                        <path\r\n                            fill=\"#ffba00\"\r\n                            d=\"m73.4 26.5-12.7-22c-.8-1.4-1.95-2.5-3.3-3.3L43.65 25 59.8 53h27.45c0-1.55-.4-3.1-1.2-4.5z\"\r\n                        />\r\n                    </svg>\r\n                    Connect to Google Drive\r\n                </DropdownMenuItem>\r\n                <DropdownMenuSeparator />\r\n                <DropdownMenuItem className=\"cursor-pointer\">\r\n                    <CloudUploadIcon /> Add photos and files\r\n                </DropdownMenuItem>\r\n            </DropdownMenuContent>\r\n        </DropdownMenu>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/prompt-input-02.tsx"
    },
    {
      "path": "registry\\default\\components\\input\\prompt-input-02.tsx",
      "content": "'use client'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport { cn } from '@/lib/utils'\r\nimport {\r\n    CloudUploadIcon,\r\n    CornerLeftUpIcon,\r\n    GlobeIcon,\r\n    LightbulbIcon,\r\n    PaperclipIcon,\r\n} from 'lucide-react'\r\nimport {\r\n    DropdownMenu,\r\n    DropdownMenuContent,\r\n    DropdownMenuItem,\r\n    DropdownMenuSeparator,\r\n    DropdownMenuTrigger,\r\n} from '@/components/ui/dropdown-menu'\r\nimport {\r\n    Tooltip,\r\n    TooltipContent,\r\n    TooltipProvider,\r\n    TooltipTrigger,\r\n} from '@/components/ui/tooltip'\r\nimport React from 'react'\r\nimport TextareaAutosize from 'react-textarea-autosize'\r\nimport { Toggle } from '@/components/ui/toggle'\r\nimport {\r\n    Select,\r\n    SelectContent,\r\n    SelectGroup,\r\n    SelectItem,\r\n    SelectTrigger,\r\n    SelectValue,\r\n} from '@/components/ui/select'\r\n\r\nconst models = [\r\n    'GPT-4.5',\r\n    'Claude 3.7 Sonnet',\r\n    'Gemini 2.0 Pro',\r\n    'LLaMA 4',\r\n    'DeepSeek-R1',\r\n    'Qwen 3',\r\n    'Grok 3',\r\n    'Mistral Large 2',\r\n    'Gemma 3',\r\n    'Mixtral 8x22B',\r\n]\r\n\r\ntype PromptInput02Props = {\r\n    quickPrompts?: { label: string; value: string }[]\r\n}\r\n\r\nexport default function PromptInput02({ quickPrompts }: PromptInput02Props) {\r\n    const [message, setMessage] = React.useState<string>('')\r\n    const [searchToggle, setSearchToggle] = React.useState<boolean>(false)\r\n    const [reasonToggle, setReasonToggle] = React.useState<boolean>(false)\r\n    const [model, setModel] = React.useState<string>(models[0])\r\n\r\n    const handleSubmit = () => {\r\n        if (message.trim() === '') return\r\n        // Handle message submission logic here\r\n        console.log('Message submitted:', message)\r\n        console.log(\r\n            'Search toggle state:',\r\n            searchToggle ? 'Enabled' : 'Disabled'\r\n        )\r\n        console.log(\r\n            'Reason toggle state:',\r\n            reasonToggle ? 'Enabled' : 'Disabled'\r\n        )\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className={cn(\r\n                    'placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input rounded-xl border bg-transparent text-base shadow-xs transition-[color,box-shadow] outline-none md:text-sm',\r\n                    'focus-within:border-ring focus-within:ring-ring/50 focus-within:ring-[3px]',\r\n                    'has-aria-invalid:ring-destructive/20 dark:has-aria-invalid:ring-destructive/40 has-aria-invalid:border-destructive group',\r\n                    'flex w-full flex-col'\r\n                )}\r\n            >\r\n                <div className=\"flex items-center justify-center gap-2 p-4\">\r\n                    <TextareaAutosize\r\n                        className=\"w-full resize-none border-none bg-transparent text-base focus-visible:outline-none\"\r\n                        placeholder=\"Ask anything...\"\r\n                        minRows={1}\r\n                        rows={1}\r\n                        maxRows={6}\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                    />\r\n\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"ghost\"\r\n                        className=\"cursor-pointer\"\r\n                        disabled={!message || message.length === 0}\r\n                        onClick={() => handleSubmit()}\r\n                    >\r\n                        Send to AI\r\n                        <CornerLeftUpIcon />\r\n                    </Button>\r\n                </div>\r\n\r\n                <div className=\"border-border flex items-center justify-between border-t p-3 px-4\">\r\n                    <TooltipProvider delayDuration={0}>\r\n                        <div className=\"flex items-center gap-2\">\r\n                            <Attachments />\r\n\r\n                            <Tooltip>\r\n                                <Toggle\r\n                                    value=\"search\"\r\n                                    asChild\r\n                                    pressed={searchToggle}\r\n                                    onPressedChange={setSearchToggle}\r\n                                    className=\"cursor-pointer\"\r\n                                >\r\n                                    <TooltipTrigger>\r\n                                        <GlobeIcon />\r\n                                        <span className=\"hidden sm:block\">\r\n                                            Search\r\n                                        </span>\r\n                                    </TooltipTrigger>\r\n                                </Toggle>\r\n                                <TooltipContent>\r\n                                    <p>Search the web</p>\r\n                                </TooltipContent>\r\n                            </Tooltip>\r\n\r\n                            <Tooltip>\r\n                                <Toggle\r\n                                    value=\"reason\"\r\n                                    asChild\r\n                                    pressed={reasonToggle}\r\n                                    onPressedChange={setReasonToggle}\r\n                                    className=\"cursor-pointer\"\r\n                                >\r\n                                    <TooltipTrigger>\r\n                                        <LightbulbIcon />\r\n                                        <span className=\"hidden sm:block\">\r\n                                            Reason\r\n                                        </span>\r\n                                    </TooltipTrigger>\r\n                                </Toggle>\r\n                                <TooltipContent>\r\n                                    <p>Think before responding</p>\r\n                                </TooltipContent>\r\n                            </Tooltip>\r\n                        </div>\r\n                    </TooltipProvider>\r\n\r\n                    <Select value={model} onValueChange={setModel}>\r\n                        <SelectTrigger className=\"max-w-[120px] sm:max-w-max\">\r\n                            <SelectValue placeholder=\"Select modal\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent align=\"end\" side=\"top\">\r\n                            <SelectGroup>\r\n                                {models.map((model) => (\r\n                                    <SelectItem\r\n                                        key={model}\r\n                                        value={model}\r\n                                        onClick={() => setModel(model)}\r\n                                    >\r\n                                        {model}\r\n                                    </SelectItem>\r\n                                ))}\r\n                            </SelectGroup>\r\n                        </SelectContent>\r\n                    </Select>\r\n                </div>\r\n            </div>\r\n            {quickPrompts && quickPrompts.length > 0 && (\r\n                <div className=\"w-full\">\r\n                    <div className=\"mt-4 flex flex-wrap items-center gap-2\">\r\n                        {quickPrompts.map((prompt) => (\r\n                            <Button\r\n                                key={prompt.value}\r\n                                variant=\"outline\"\r\n                                size=\"sm\"\r\n                                onClick={() => setMessage(prompt.value)}\r\n                                className=\"cursor-pointer\"\r\n                            >\r\n                                {prompt.label}\r\n                            </Button>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nfunction Attachments() {\r\n    return (\r\n        <DropdownMenu>\r\n            <Tooltip>\r\n                <TooltipTrigger asChild>\r\n                    <DropdownMenuTrigger asChild>\r\n                        <Button\r\n                            type=\"button\"\r\n                            variant=\"ghost\"\r\n                            className=\"cursor-pointer\"\r\n                        >\r\n                            <PaperclipIcon />\r\n                            <span className=\"hidden sm:block\">Attachments</span>\r\n                        </Button>\r\n                    </DropdownMenuTrigger>\r\n                </TooltipTrigger>\r\n\r\n                <TooltipContent>\r\n                    <p>Add photos and files</p>\r\n                </TooltipContent>\r\n            </Tooltip>\r\n\r\n            <DropdownMenuContent align=\"start\" side=\"top\">\r\n                <DropdownMenuItem className=\"cursor-pointer\">\r\n                    <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        viewBox=\"0 0 87.3 78\"\r\n                    >\r\n                        <path\r\n                            fill=\"#0066da\"\r\n                            d=\"m6.6 66.85 3.85 6.65c.8 1.4 1.95 2.5 3.3 3.3L27.5 53H0c0 1.55.4 3.1 1.2 4.5z\"\r\n                        />\r\n                        <path\r\n                            fill=\"#00ac47\"\r\n                            d=\"M43.65 25 29.9 1.2c-1.35.8-2.5 1.9-3.3 3.3l-25.4 44A9.06 9.06 0 0 0 0 53h27.5z\"\r\n                        />\r\n                        <path\r\n                            fill=\"#ea4335\"\r\n                            d=\"M73.55 76.8c1.35-.8 2.5-1.9 3.3-3.3l1.6-2.75L86.1 57.5c.8-1.4 1.2-2.95 1.2-4.5H59.798l5.852 11.5z\"\r\n                        />\r\n                        <path\r\n                            fill=\"#00832d\"\r\n                            d=\"M43.65 25 57.4 1.2C56.05.4 54.5 0 52.9 0H34.4c-1.6 0-3.15.45-4.5 1.2z\"\r\n                        />\r\n                        <path\r\n                            fill=\"#2684fc\"\r\n                            d=\"M59.8 53H27.5L13.75 76.8c1.35.8 2.9 1.2 4.5 1.2h50.8c1.6 0 3.15-.45 4.5-1.2z\"\r\n                        />\r\n                        <path\r\n                            fill=\"#ffba00\"\r\n                            d=\"m73.4 26.5-12.7-22c-.8-1.4-1.95-2.5-3.3-3.3L43.65 25 59.8 53h27.45c0-1.55-.4-3.1-1.2-4.5z\"\r\n                        />\r\n                    </svg>\r\n                    Connect to Google Drive\r\n                </DropdownMenuItem>\r\n                <DropdownMenuSeparator />\r\n                <DropdownMenuItem className=\"cursor-pointer\">\r\n                    <CloudUploadIcon /> Add photos and files\r\n                </DropdownMenuItem>\r\n            </DropdownMenuContent>\r\n        </DropdownMenu>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\button.tsx",
      "content": "import * as React from 'react'\r\nimport { Slot } from '@radix-ui/react-slot'\r\nimport { cva, type VariantProps } from 'class-variance-authority'\r\n\r\nimport { cn } from '@/lib/utils'\r\n\r\nconst buttonVariants = cva(\r\n    \"inline-flex items-center relative justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive group\",\r\n    {\r\n        variants: {\r\n            variant: {\r\n                default:\r\n                    'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\r\n                destructive:\r\n                    'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\r\n                outline:\r\n                    'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\r\n                secondary:\r\n                    'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\r\n                ghost: 'hover:bg-accent hover:text-accent-foreground',\r\n                link: 'text-primary underline-offset-4 hover:underline',\r\n                defaultWithOutline:\r\n                    'bg-transparent text-primary-foreground border border-border hover:border-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50 dark:text-primary-foreground before:-z-10 before:content-[\"\"] before:absolute before:top-1/2 before:left-1/2 dark:hover:border-foreground before:-translate-x-1/2 before:-translate-y-1/2 before:w-[calc(100%-6px)] before:h-[calc(100%-6px)] before:rounded-sm before:bg-primary  before:transition-colors duration-500',\r\n                secondaryWithOutline:\r\n                    'bg-transparent text-secondary-foreground border border-border hover:border-foreground dark:bg-input/30 dark:border-input dark:hover:border-primary dark:hover:bg-input/50 dark:text-secondary-foreground before:-z-10 before:content-[\"\"] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-[calc(100%-6px)] before:h-[calc(100%-6px)] before:rounded-sm before:bg-secondary before:transition-colors duration-500',\r\n            },\r\n            size: {\r\n                default: 'h-9 px-4 py-2 has-[>svg]:px-3',\r\n                sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\r\n                lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\r\n                xl: 'h-12 rounded-md px-8 has-[>svg]:px-6',\r\n                icon: 'size-9',\r\n                iconSm: 'size-8',\r\n                iconXsm: 'size-5',\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            variant: 'default',\r\n            size: 'default',\r\n        },\r\n    }\r\n)\r\n\r\nfunction Button({\r\n    className,\r\n    variant,\r\n    size,\r\n    asChild = false,\r\n    ...props\r\n}: React.ComponentProps<'button'> &\r\n    VariantProps<typeof buttonVariants> & {\r\n        asChild?: boolean\r\n    }) {\r\n    const Comp = asChild ? Slot : 'button'\r\n\r\n    return (\r\n        <Comp\r\n            data-slot=\"button\"\r\n            className={cn(buttonVariants({ variant, size, className }))}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nexport { Button, buttonVariants }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\dropdown-menu.tsx",
      "content": "'use client'\r\n\r\nimport * as React from 'react'\r\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'\r\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\r\n\r\nimport { cn } from '@/lib/utils'\r\n\r\nfunction DropdownMenu({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\r\n    return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\r\n}\r\n\r\nfunction DropdownMenuPortal({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Portal\r\n            data-slot=\"dropdown-menu-portal\"\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuTrigger({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Trigger\r\n            data-slot=\"dropdown-menu-trigger\"\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuContent({\r\n    className,\r\n    sideOffset = 4,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Portal>\r\n            <DropdownMenuPrimitive.Content\r\n                data-slot=\"dropdown-menu-content\"\r\n                sideOffset={sideOffset}\r\n                className={cn(\r\n                    'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\r\n                    className\r\n                )}\r\n                {...props}\r\n            />\r\n        </DropdownMenuPrimitive.Portal>\r\n    )\r\n}\r\n\r\nfunction DropdownMenuGroup({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Group\r\n            data-slot=\"dropdown-menu-group\"\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuItem({\r\n    className,\r\n    inset,\r\n    variant = 'default',\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\r\n    inset?: boolean\r\n    variant?: 'default' | 'destructive'\r\n}) {\r\n    return (\r\n        <DropdownMenuPrimitive.Item\r\n            data-slot=\"dropdown-menu-item\"\r\n            data-inset={inset}\r\n            data-variant={variant}\r\n            className={cn(\r\n                \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden transition-all select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuCheckboxItem({\r\n    className,\r\n    children,\r\n    checked,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\r\n    return (\r\n        <DropdownMenuPrimitive.CheckboxItem\r\n            data-slot=\"dropdown-menu-checkbox-item\"\r\n            className={cn(\r\n                \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n                className\r\n            )}\r\n            checked={checked}\r\n            {...props}\r\n        >\r\n            <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\r\n                <DropdownMenuPrimitive.ItemIndicator>\r\n                    <CheckIcon className=\"size-4\" />\r\n                </DropdownMenuPrimitive.ItemIndicator>\r\n            </span>\r\n            {children}\r\n        </DropdownMenuPrimitive.CheckboxItem>\r\n    )\r\n}\r\n\r\nfunction DropdownMenuRadioGroup({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\r\n    return (\r\n        <DropdownMenuPrimitive.RadioGroup\r\n            data-slot=\"dropdown-menu-radio-group\"\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuRadioItem({\r\n    className,\r\n    children,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\r\n    return (\r\n        <DropdownMenuPrimitive.RadioItem\r\n            data-slot=\"dropdown-menu-radio-item\"\r\n            className={cn(\r\n                \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\r\n                <DropdownMenuPrimitive.ItemIndicator>\r\n                    <CircleIcon className=\"size-2 fill-current\" />\r\n                </DropdownMenuPrimitive.ItemIndicator>\r\n            </span>\r\n            {children}\r\n        </DropdownMenuPrimitive.RadioItem>\r\n    )\r\n}\r\n\r\nfunction DropdownMenuLabel({\r\n    className,\r\n    inset,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\r\n    inset?: boolean\r\n}) {\r\n    return (\r\n        <DropdownMenuPrimitive.Label\r\n            data-slot=\"dropdown-menu-label\"\r\n            data-inset={inset}\r\n            className={cn(\r\n                'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuSeparator({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Separator\r\n            data-slot=\"dropdown-menu-separator\"\r\n            className={cn('bg-border -mx-1 my-1 h-px', className)}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuShortcut({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<'span'>) {\r\n    return (\r\n        <span\r\n            data-slot=\"dropdown-menu-shortcut\"\r\n            className={cn(\r\n                'text-muted-foreground border-border ml-auto flex aspect-square h-5 w-5 items-center justify-center rounded-sm border text-xs leading-none font-medium tracking-widest',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuSub({\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\r\n    return (\r\n        <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\r\n    )\r\n}\r\n\r\nfunction DropdownMenuSubTrigger({\r\n    className,\r\n    inset,\r\n    children,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\r\n    inset?: boolean\r\n}) {\r\n    return (\r\n        <DropdownMenuPrimitive.SubTrigger\r\n            data-slot=\"dropdown-menu-sub-trigger\"\r\n            data-inset={inset}\r\n            className={cn(\r\n                'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            {children}\r\n            <ChevronRightIcon className=\"ml-auto size-4\" />\r\n        </DropdownMenuPrimitive.SubTrigger>\r\n    )\r\n}\r\n\r\nfunction DropdownMenuSubContent({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\r\n    return (\r\n        <DropdownMenuPrimitive.SubContent\r\n            data-slot=\"dropdown-menu-sub-content\"\r\n            className={cn(\r\n                'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nexport {\r\n    DropdownMenu,\r\n    DropdownMenuPortal,\r\n    DropdownMenuTrigger,\r\n    DropdownMenuContent,\r\n    DropdownMenuGroup,\r\n    DropdownMenuLabel,\r\n    DropdownMenuItem,\r\n    DropdownMenuCheckboxItem,\r\n    DropdownMenuRadioGroup,\r\n    DropdownMenuRadioItem,\r\n    DropdownMenuSeparator,\r\n    DropdownMenuShortcut,\r\n    DropdownMenuSub,\r\n    DropdownMenuSubTrigger,\r\n    DropdownMenuSubContent,\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\tooltip.tsx",
      "content": "'use client'\r\n\r\nimport * as React from 'react'\r\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip'\r\n\r\nimport { cn } from '@/lib/utils'\r\n\r\nfunction TooltipProvider({\r\n    delayDuration = 0,\r\n    ...props\r\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\r\n    return (\r\n        <TooltipPrimitive.Provider\r\n            data-slot=\"tooltip-provider\"\r\n            delayDuration={delayDuration}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction Tooltip({\r\n    ...props\r\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\r\n    return (\r\n        <TooltipProvider>\r\n            <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\r\n        </TooltipProvider>\r\n    )\r\n}\r\n\r\nfunction TooltipTrigger({\r\n    ...props\r\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\r\n    return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\r\n}\r\n\r\nfunction TooltipContent({\r\n    className,\r\n    sideOffset = 0,\r\n    children,\r\n    showArrow = false,\r\n    ...props\r\n}: React.ComponentProps<typeof TooltipPrimitive.Content> & {\r\n    showArrow?: boolean\r\n}) {\r\n    return (\r\n        <TooltipPrimitive.Portal>\r\n            <TooltipPrimitive.Content\r\n                data-slot=\"tooltip-content\"\r\n                sideOffset={sideOffset}\r\n                className={cn(\r\n                    'bg-popover text-popover-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance',\r\n                    !showArrow && 'border-grid -translate-y-2 border',\r\n                    className\r\n                )}\r\n                {...props}\r\n            >\r\n                {children}\r\n                {showArrow && (\r\n                    <TooltipPrimitive.Arrow className=\"bg-popover fill-popover z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\r\n                )}\r\n            </TooltipPrimitive.Content>\r\n        </TooltipPrimitive.Portal>\r\n    )\r\n}\r\n\r\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\toggle.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst toggleVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-transparent\",\r\n        outline:\r\n          \"border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground\",\r\n      },\r\n      size: {\r\n        default: \"h-9 px-2 min-w-9\",\r\n        sm: \"h-8 px-1.5 min-w-8\",\r\n        lg: \"h-10 px-2.5 min-w-10\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nfunction Toggle({\r\n  className,\r\n  variant,\r\n  size,\r\n  ...props\r\n}: React.ComponentProps<typeof TogglePrimitive.Root> &\r\n  VariantProps<typeof toggleVariants>) {\r\n  return (\r\n    <TogglePrimitive.Root\r\n      data-slot=\"toggle\"\r\n      className={cn(toggleVariants({ variant, size, className }))}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Toggle, toggleVariants }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\select.tsx",
      "content": "'use client'\r\n\r\nimport * as React from 'react'\r\nimport * as SelectPrimitive from '@radix-ui/react-select'\r\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from 'lucide-react'\r\n\r\nimport { cn } from '@/lib/utils'\r\n\r\nfunction Select({\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\r\n    return <SelectPrimitive.Root data-slot=\"select\" {...props} />\r\n}\r\n\r\nfunction SelectGroup({\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\r\n    return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\r\n}\r\n\r\nfunction SelectValue({\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\r\n    return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\r\n}\r\n\r\nfunction SelectTrigger({\r\n    className,\r\n    size = 'default',\r\n    children,\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\r\n    size?: 'sm' | 'default'\r\n}) {\r\n    return (\r\n        <SelectPrimitive.Trigger\r\n            data-slot=\"select-trigger\"\r\n            data-size={size}\r\n            className={cn(\r\n                \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            {children}\r\n            <SelectPrimitive.Icon asChild>\r\n                <ChevronDownIcon className=\"size-4 opacity-50\" />\r\n            </SelectPrimitive.Icon>\r\n        </SelectPrimitive.Trigger>\r\n    )\r\n}\r\n\r\nfunction SelectContent({\r\n    className,\r\n    children,\r\n    position = 'popper',\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\r\n    return (\r\n        <SelectPrimitive.Portal>\r\n            <SelectPrimitive.Content\r\n                data-slot=\"select-content\"\r\n                className={cn(\r\n                    'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md',\r\n                    position === 'popper' &&\r\n                        'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\r\n                    className\r\n                )}\r\n                position={position}\r\n                {...props}\r\n            >\r\n                <SelectScrollUpButton />\r\n                <SelectPrimitive.Viewport\r\n                    className={cn(\r\n                        'p-1',\r\n                        position === 'popper' &&\r\n                            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1'\r\n                    )}\r\n                >\r\n                    {children}\r\n                </SelectPrimitive.Viewport>\r\n                <SelectScrollDownButton />\r\n            </SelectPrimitive.Content>\r\n        </SelectPrimitive.Portal>\r\n    )\r\n}\r\n\r\nfunction SelectLabel({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\r\n    return (\r\n        <SelectPrimitive.Label\r\n            data-slot=\"select-label\"\r\n            className={cn(\r\n                'text-muted-foreground px-2 py-1.5 text-xs',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction SelectItem({\r\n    className,\r\n    children,\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\r\n    return (\r\n        <SelectPrimitive.Item\r\n            data-slot=\"select-item\"\r\n            className={cn(\r\n                \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\r\n                <SelectPrimitive.ItemIndicator>\r\n                    <CheckIcon className=\"size-4\" />\r\n                </SelectPrimitive.ItemIndicator>\r\n            </span>\r\n            <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\r\n        </SelectPrimitive.Item>\r\n    )\r\n}\r\n\r\nfunction SelectSeparator({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\r\n    return (\r\n        <SelectPrimitive.Separator\r\n            data-slot=\"select-separator\"\r\n            className={cn(\r\n                'bg-border pointer-events-none -mx-1 my-1 h-px',\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction SelectScrollUpButton({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\r\n    return (\r\n        <SelectPrimitive.ScrollUpButton\r\n            data-slot=\"select-scroll-up-button\"\r\n            className={cn(\r\n                'flex cursor-default items-center justify-center py-1',\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            <ChevronUpIcon className=\"size-4\" />\r\n        </SelectPrimitive.ScrollUpButton>\r\n    )\r\n}\r\n\r\nfunction SelectScrollDownButton({\r\n    className,\r\n    ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\r\n    return (\r\n        <SelectPrimitive.ScrollDownButton\r\n            data-slot=\"select-scroll-down-button\"\r\n            className={cn(\r\n                'flex cursor-default items-center justify-center py-1',\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            <ChevronDownIcon className=\"size-4\" />\r\n        </SelectPrimitive.ScrollDownButton>\r\n    )\r\n}\r\n\r\nexport {\r\n    Select,\r\n    SelectContent,\r\n    SelectGroup,\r\n    SelectItem,\r\n    SelectLabel,\r\n    SelectScrollDownButton,\r\n    SelectScrollUpButton,\r\n    SelectSeparator,\r\n    SelectTrigger,\r\n    SelectValue,\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx'\r\nimport { twMerge } from 'tailwind-merge'\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n    return twMerge(clsx(inputs))\r\n}\r\n\r\nexport const convertRegistryPaths = (content: string): string => {\r\n    return content\r\n        .replace(/@\\/registry\\/default\\/ui/g, '@/components/ui')\r\n        .replace(/@\\/registry\\/default\\/hooks/g, '@/hooks')\r\n        .replace(/@\\/registry\\/default\\/lib/g, '@/lib')\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}